FORMAT: 1A
HOST: http://server-url

# mPOS 2

This is reference documentation for REST API server, 
part of mPOS Cash Register solution, developed by Nine Digit s.r.o.

Server handles communication with hardware devices such as 
order printers (for food orders) or fiscal printers (for receipt printing).
Client does not have to communicate directly with these components
because whole process of sale - from food ordering to receipt priting - 
is covered by endpoints specified below.

## Terms used in this API

- Cashier is adressed as *user*
- Cash register is adressed as *device*
- Merchandise article is adressed as *PLU*
- Food order is adressed as *(opened) ticket*
- Process of printing food orders (to kitchen printers) is adressed as *order processing*
- Process of receipt printing (to receipt printers) is adressed as *ticket closing*
- Printed receipt is adressed as *(closed) ticket*
- Kitchen printer is adressed as *order endpoint*
- Receipt printer is adresesed as *fiscal device*

## Authentication types

API server currently supports two types of authentication:

- User Access Token
- HMAC


### User Access Token - JWT

JWT Token is issued by calling [posting login resource](#reference/auth/user-authentication/login).
Token may be placed in one (or both) of two headers:

1. Authorization
  - Example: `Authorization: JWT <AccessToken>`
  - Please note placing `JWT` authorization scheme before token

2. X-Access-Token
  - Example: `X-Access-Token: <AccessToken>`


### HMAC using Authorization Header

When authorizing using Authorization header, the header value
includes, among other things, a signature. The signature is used
to identify a user and verify an authenticity of request data.

Authorization header format:

`Authorization: NWS2-HMAC-SHA256 Credential={ApiKey}",SignedHeaders={SignedHeaders},Nonce={Nonce},Timestamp={Timestamp},Signature={Signature}`

Please note that `NWS2-HMAC-SHA256` authorization scheme is placed before other data.

Where:

- `ApiKey` is Unique application identifier, for example
`0b18ca1d06a5425d3c6a092d65f8aaad428d4894`.

- `SignedHeaders` is List of all HTTP headers, included in signature
calculation, for example `host;x-nws-content-sha256`.
Described later in this document.

- `Nonce` is a random string, **uniquely generated by the client**, to allow
the server to verify that a request has never been made before and
helps prevent replay attacks when requests are made over a non-secure
channel. The nonce value must be unique across all requests with the
same timestamp.
    - To avoid the need to retain an infinite number of nonce values for
future checks, servers chooses to restrict the time period after
which a request with an old timestamp is rejected. Time window
is set to 300 seconds. This kind of restriction implies a level
of synchronization between the client's and server's clocks.

##### Recommended nonce generating function:

`Nonce = Hex(SHA256Hash({ApiKey} + ":" + {ClientUniqueString} + ":" + {Timestamp}))`

where:

- `ClientUniqueString` can be any string, that is unique for client,
for example request nuber or some pseudorandom string.

- `Timestamp`: Date and time in ISO8601 format, for example: 2016-06-24T18:37:00.8884678+02:00.
See https://en.wikipedia.org/wiki/ISO_8601.

- `Signature`: Calculated request signature. Described later in this document.


Upcoming chapter describes signature calculation, depending on following methods:

- `string LowerCase(s)` is an method that converts the string to lowercase.

- `string Hex(data)` is an method that converts string to base 16 encoded lowercase string.

- `string SHA256Hash(data)` is an method that hashes data with Secure Hash Algorithm (SHA) cryptographic
hash function.

- `string HMAC-SHA256(data, key)`: Computes HMAC by using the SHA256
agorithm and provided signing key.

- `string Trim(data)`: Remove any leading or trailing whitespace.

- `string UriEncode(data)`: Uri encode every byte.
UriEncode() must enforce the following rules:
    - URI encode every byte except the unreserved characters: 'A'-'Z', 'a'-'z', '0'-'9', '-', '.', '_', and '~'.
    - The space character is a reserved character and must be encoded as "%20" (and not as "+").
    - Each URI encoded byte is formed by a '%' and the two-digit hexadecimal value of the byte.
    - Letters in the hexadecimal value must be uppercase, for example "%1A".
    - Encode the forward slash character, '/', everywhere except in the object key name. For example, if the object key name is photos/Jan/sample.jpg, the forward slash in the key name is not encoded.

#### Calculating a Signature

Signature calculation process consists of three steps:
 1. Create canonical request
 2. Create string to sign
 3. Compute signature

##### 1. Create canonical request

The following is the canonical request format used to calculate
a signature:

```
{HTTPMethod} + "\n" +
{CanonicalURI} + "\n" +
{CanonicalQueryString} + "\n" +
{CanonicalHeaders} + "\n" +
{SignedHeaders} + "\n" +
{HashedPayload}
```

where:


- `HTTPMethod` is string representation of one of the HTTP methods,
for example GET, POST, PUT etc.

- `CanonicalURI` is the URI-encoded version of the absolute path
component of the URI—everything starting with the "/" that follows
the domain name and up to the end of the string or to the question
mark character ('?') if you have query string parameters.
    - Example: `http://example.com/users/1`

- `CanonicalQueryString` specifies the URI-encoded query string parameters. Name and value are URI-encoded individually. Parameters must be sorted in the canonical query string alphabetically by key name. This is done after encoding.

```
UriEncode(<queryParameter1>) + "=" + UriEncode(<value1>) + "&" +
UriEncode(<queryParameter2>) + "=" + UriEncode(<value2>) + "&" +
...
UriEncode(<queryParameterN>) + "=" + UriEncode(<valueN>)
```

If the URI does not include a query string in the request, canonical
query string must be set as an empty string followed by "\n".

The query string in the following URI example is `prefix=somePrefix&marker=someMarker&max-keys=20`

The URI looks like:
`http://example.com/user/1?prefix=somePrefix&marker=someMarker&max-keys=20`

The canonical query string is as follows (line breaks are added to this example for readability):

```
URI-encode("marker")+"="+URI-encode("someMarker")+"&"+
URI-encode("max-keys")+"="+URI-encode("20") + "&" +
URI-encode("prefix")+"="+URI-encode("somePrefix")
```

- `CanonicalHeaders` is a list of request request header name-value
pairs, separated by new line character ("\n"). Header names must
be sorted alphabetically and must be in lowercase.

```
Lowercase(<headerName1>) + ":" + Trim(<value1>) + "\n" +
Lowercase(<headerName2>) + ":" + Trim(<value2>) + "\n" +
...
Lowercase(<headerNameN>) + ":" + Trim(<valueN>)
```

The `CanonicalHeaders` list must include the following:
- HTTP `host` header
- `x-nws-content-sha256` If there is no content provided in therequest,
value contains hash of an empty string.

The following is an example CanonicalHeaders string. The header names are in lowercase and sorted.
```
host:example.com
x-nws-content-sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b785
2b855
```


- `SignedHeaders` is an aplhabetically sorted, semicolon-separated list
of lowercase request header names. Contains same header names as
in `CanonicalHeaders` list.

`Lowercase(<headerName1>) + ";" + Lowercase(<headerName2>) + ";"+ ... + Lowercase(<headerNameN>)`

For example, for the previous example, the value of SignedHeaders would be as follows:
`host;x-amz-content-sha256`

- `HashedPayload` is the hexadecimal value of the SHA256 hash of the request payload.

`Hex(SHA256Hash(<payload>))`

Empty payload's hash is computed as hash of an empty string and is equal to:

`e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855`

##### 2. Create string to sign

The string to sign is a concatenation of the following strings:

```
"NWS2-HMAC-SHA256" + "\n" +
{ApiKey}  + "\n" +
{Timestamp} + "\n" +
{Nonce} + "\n" +
Hex(SHA256Hash({CanonicalRequest}))
```

`ApiKey` mentioned previously.

`Timestamp` mentioned previously.

`Nonce` mentioned previously.

`CanonicalRequest` previously created canonical request.


##### 3. Compute signature

Signature is now created as a HMAC-SHA256 hash of the
string to sign, using the signing key as the key.


`Signature = Hex(HMAC-SHA256({SigningKey}, {StringToSign}))`


*SigningKey* is created as follows:


`SigningKey = HMAC-SHA256("NWS2" + <ApiKey>, <Timestamp>)`


`StringToSign` is previously created canonical string, that is about to be signed.

#### Example of signature calculation

This example *POST* request closes the ticket with specific `TicketCloseContext` parameter as payload.

`http://localhost:3000/api/tickets/5761b5005abb4049f422da52/close`

```
{
  FiscalName: "Fiscal1",
  Employee:
  {
    Name: "Tomáš",
    UserName: "123"
  }
}
```

The following steps show signature calculations.

##### 1. StringToSign

###### CanonicalRequest

```
POST
/api/tickets/5761b5005abb4049f422da52/close

host:localhost:3000
x-nws-content-sha256:9af3d30133d43f355fcc260109d79fa61cd9833c6eaafed48bad951d8fb06643

host;x-nws-content-sha256
9af3d30133d43f355fcc260109d79fa61cd9833c6eaafed48bad951d8fb06643
```

In the canonical request, the third line is empty because there are no query parameters in the request.
The last line is the hash of the body, which should be same as the `x-nws-content-sha256` header value.

###### StringToSign

```
NWS2-HMAC-SHA256
0b18ca1d06a5425d3c6a092d65f8aaad428d4894
2016-06-24T18:37:00.8884678+02:00
2d4600d0879e1a29bf8e00ddc0d153fb6b72b20eadc8c6166a01ca9b50052b10
5cd93cc01dec2721a84d69f25cb5aca0a12adc5c4c5e0745810ba3ce8efafafb
```

##### 2. SigningKey

`signing key = HMAC-SHA256(HMAC-SHA256(HMAC-SHA256(HMAC-SHA256("NWS2" + "<YourSecretAccessKey>","2016-06-24T18:37:00.8884678+02:00"))`

##### 3. Signature

`3a6af7420e02a1161a23aa60679f21179a008b0d299a4d4e2b810957680cfa1d`

##### 4. Authorization header

The resulting `Authorization` header is as follows:

`NWS2-HMAC-SHA256 Credential=0b18ca1d06a5425d3c6a092d65f8aaad428d4894,SignedHeaders=host%3bx-nws-content-sha256,Nonce=2d4600d0879e1a29bf8e00ddc0d153fb6b72b20eadc8c6166a01ca9b50052b10,Timestamp=2016-06-24T18%3a37%3a00.8884678%2b02%3a00,Signature=3a6af7420e02a1161a23aa60679f21179a008b0d299a4d4e2b810957680cfa1d`

## Notifications

The purpose of the *Notification Server* is to push resource and other system specific
events directly to the subscribed clients.

Service is build on top of the [SignalR](http://www.asp.net/signalr) library,
which allows using of different transport layers and provides a nearly real-time,
event-based communication.

Useful SignalR libraries:

- [JAVA https://github.com/SignalR/java-client](https://github.com/SignalR/java-client)

- [JavaScript TBD]

Useful SignalR docs:
- [SignalR Javascript Guide](http://www.asp.net/signalr/overview/guide-to-the-api/hubs-api-guide-javascript-client)

- [SignalR Troubleshooting](http://www.asp.net/signalr/overview/testing-and-debugging/troubleshooting)

*Note: Upcomming sections describes Javascript integration of Notification Client.*

### General

Server exposes all necessary actions via hub called *MainHub*, containg methods
for subscribing and raising events. Those methods are available only for authenticated
clients.

Hub methods:

- `bool Subscribe(subscribeContext)`: Allows subscribing of currently authenticated
client to event, specified by its name in `subscribeContext` argument. Returns `True`,
if subscribtion was successful, `False` when subscription with provided parameters
already exists.

- `bool Unsubscribe(unsubscribeContext)`: Unsubscribes currently authenticated user from
event, specified by its name in `unsubscribeContext` argument. Returns `True`, when
unsubscribe was successful, `False` when subscription to event, with provided
parameters never existed.

- `void Raise(raiseContext)`: Raises event with specific name and parameter, provided
in `raiseContext` argument.

### Client authentication

Notification server currently supports authentication via
[*JWT Access Token*](#introduction/authentication-types/user-access-token-jwt),
described earlier in this document. Obtained accces token must be enclosed
in request *Headers* or in *Query String* under the *Bearer* key, just before
connection to notification server occurs.


```
...
var accessToken = 'ACCESS_TOKEN';

$.connection.hub.url = "http://localhost:30000/signalr";
$.connection.hub.qs = "Bearer=" + accessToken;

var mainHub = $.connection.mainHub;

mainHub.client.onEvent = function(hubNotification) {
  ...
};

$.connection.hub.start().done(function () {

  mainHub.server
    .subscribe({ EventName: "EVENT_NAME" })
    .done(function () { ... });

});
```

### Subscribing to the event

To receive specific set of events, client has to subscribe to them via `subscribe` method
and register `onEvent` handler. Be aware, that `onEvent` handler registration must occur
before connection to hub is estabilished.

*hubNotification* argument of *onEvent*'s callback method consists of:

- `EventName` *(string)*: Name of the raised event.

- `Sender` *(UserEndpointIdentity)*: Event sender context.

- `Expires` *(string?)*: Optional date date and time in ISO8601 format, that informs,
when should be the event considered as expired.

- `Payload` *(object)*: Payload, specific to the event.


*UserEndpointIdentity*

- `Id` *(string)*: Optional unique identifier of endpoint, from which was event raised.
*NULL* if endpoint indetifier is not known.

- `UserName` *(string)*: Unique user name.

- `DeviceName` *(string)*: Name of the device, where the user is operating.


Example of event subscription:

```
mainHub.server
    .subscribe({ EventName: "EVENT_NAME" })
    .done(function (isSubscribed) { ... });
```

Subscribe method's argument, `subscribeContext`, consists of:

- `EventName` *(string)*: Name of the event, we are subscribing to.

*NOTE: Unsubscribing can be done by invoking `unsubscribe` method with the same parameters.*

### Receiving an event

Subscribed events are handled in `onEvent` handler, described above. Client must handle
and delegate specific events on its own.


Example of `hubNotification` object:

```
{
  EventName: "TicketCreated",
  Sender: {
    Id: null,
    UserName: "999",
    DeviceName: "P01"
  },
  Expires: "2016-06-28T12:51:52.558Z",
  Payload: {
    ResourceId: "573f4511088c772684a738f8",
    ResourceName: "Ticket",
    ResourceVersion: 7
  }
}
```

All resource oriented events (listed below)[#introduction/notifications/list-of-all-events],
has payload of `Resource Description` type with these properties:


`ResourceId` *(string)*: Resource unique identifier.

`ResourceName` *(string)*: Resource type name.

`ResourceVersion` *(uint)*: Resource version. More on this below.

### Handling connection problems

Client can experience various network problems, that also affects communication with
SignalR server. It's required that dropped connection should be re-estabilished as soon
as possible.

More on handling connection events can be found [here](http://www.asp.net/signalr/overview/guide-to-the-api/handling-connection-lifetime-events).

```
$.connection.hub.disconnected(function () {
   setTimeout(function () {
       $.connection.hub.start();
   }, 5000); // Restart connection after 5 seconds.
});
```


### Resource versioning

*mPOS API* supports resource versioning, and so Notification Server does.
Higher the number is, newer the document is. Subscribed client can easily derermine
*freshness* of their local resource and can react appropriately on received notification.

### List of all events

Following list contains all event names defined in system.

- Api key
  - `ApiKeyCreated`
  - `ApiKeyUpdated`
  - `ApiKeyDeleted`

- Article category
  - `ArticleCategoryCreated`
  - `ArticleCategoryUpdated`
  - `ArticleCategoryDeleted`

- Company
  - `CompanyCreated`
  - `CompanyUpdated`
  - `CompanyDeleted`

- Currency 
  - `CurrencyCreated`
  - `CurrencyUpdated`
  - `CurrencyDeleted`

- Customer
  - `CustomerCreated`
  - `CustomerUpdated`
  - `CustomerDeleted`

- Daily sales report
  - `DailySalesReportCreated`
  - `DailySalesReportUpdated`
  - `DailySalesReportDeleted`

- Device
  - `DeviceCreated`
  - `DeviceUpdated`
  - `DeviceDeleted`

- Fiscal
  - `FiscalCreated`
  - `FiscalUpdated`
  - `FiscalDeleted`

- Licence
  - `LicenceActivated`

- Order
  - `OrderUpdated`
  - `OrderDeleted`

- Payment type 
  - `PaymentTypeCreated`
  - `PaymentTypeUpdated`
  - `PaymentTypeDeleted`

- PLU
  - `PluCreated`
  - `PluUpdated`
  - `PluDeleted`

- Order endpoint
  - `OrderEndpointCreated`
  - `OrderEndpointUpdated`
  - `OrderEndpointDeleted`

- Role
  - `RoleCreated`
  - `RoleUpdated`
  - `RoleDeleted`

- Stock
  - `StockCreated`
  - `StockUpdated`
  - `StockDeleted`

- Stock transfer
  - `StockTransferCreated`
  - `StockTransferUpdated`
  - `StockTransferDeleted`

- Stock taking
  - `StockTakingCreated`
  - `StockTakingUpdated`
  - `StockTakingDeleted`

- Ticket
  - `TicketCreated`
  - `TicketUpdated`
  - `TicketDeleted`

- User
  - `UserCreated`
  - `UserUpdated`
  - `UserDeleted`

- Vat
  - `VatCreated`
  - `VatUpdated`
  - `VatDeleted`

- Zone
  - `ZoneCreated`
  - `ZoneUpdated`
  - `ZoneDeleted`

## User Roles

Each resource that API provides has one of access restrictions:

- None : Resource is *whitelisted* during authorization, and no authorization is required to access the resource.
- Authorized : Authorization is required to acccess resource, but no specific user role is required.
- Role required : User must be authorized and must have specific "user role(s)" assigned to access the resource. Note that specific payloads may modify roles that are required to perform action. For example: user may update ticket with user role `TicketUpdate`. But if provided ticket contains item quantity decrease, API requires additional `storno` role.

### List of all user roles

- Api key
  - `apiKeyCreate`
  - `apiKeyUpdate`
  - `apiKeyDelete`

- Article Category
  - `articleCategoryCreate`
  - `articleCategoryUpdate`
  - `articleCategoryDelete`

- Currency
  - `currencyCreate`
  - `currencyUpdate`
  - `currencyDelete`

- Customer
  - `customerCreate`
  - `customerUpdate`
  - `customerDelete`
  - `customerSetCredit`
  - `customerSetDiscount`

- Company
  - `companyCreate`
  - `companyUpdate`
  - `companyDelete`

- DailySalesReport
  - `dsrCreate`
  - `dsrUpdate`
  - `dsrDelete`

- Device
  - `deviceCreate`
  - `deviceUpdate`
  - `deviceDelete`

- Fiscal
  - `fiscalCreate`
  - `fiscalUpdate`
  - `fiscalDelete`
  - `fiscalOpenDrawer`
  - `fiscalCashTransfer`
  - `fiscalPrintRecordCopy`
  - `summaryIntervalSalesReport`
  - `detailedIntervalSalesReport`
  - `overviewSalesReport`
  - `doDailySalesReport`
  - `fiscalPrintDailySalesReportCopy`
  - `printNonfiscalRecord`

- Licence
  - `licenceGet`
  - `licenceActivate`

- Orders
  - `orderUpdate`
  - `orderDelete`
  - `orderProcess`

- PaymentTypes
  - `paymentTypeCreate`
  - `paymentTypeUpdate`
  - `paymentTypeDelete`

- PLUs
  - `pluCreate`
  - `pluUpdate`
  - `pluDelete`

- OrderEndpoints
  - `orderEndpointCreate`
  - `orderEndpointUpdate`
  - `orderEndpointDelete`

- Roles
  - `roleCreate`
  - `roleUpdate`
  - `roleDelete`

- Stats
  - `stats`
  - `statsCurrent`
  - `statsPlus`
  - `statsPrint`
  - `statsTickets`
  - `statsTicketsCurrent`

- Stocks
  - `stockCreate`
  - `stockUpdate`
  - `stockDelete`

- StockTransfers
  - `stockTransferCreate`
  - `stockTransferUpdate`
  - `stockTransferUpdateAny`
  - `stockTransferDelete`
  - `stockTransferClose`

- StockTakings
  - `stockTakingCreate`
  - `stockTakingUpdate`
  - `stockTakingDelete`

- Tickets
  - `ticketCreate`
  - `ticketUpdate`
  - `ticketUpdateAny`
  - `ticketDelete`
  - `ticketSetDiscount`
  - `ticketSetCustomer`
  - `ticketClose`
  - `ticketCloseAny`
  - `ticketCloseAs`
  - `ticketCloseToAnyFiscal`
  - `ticketPrintPreliminary`
  - `ticketSplit`
  - `ticketMerge`
  - `ticketHandover`
  - `ticketTakeover`
  - `ticketRefund`

- User
  - `userCreate`
  - `userUpdate`
  - `userDelete`

- Vats
  - `vatCreate`
  - `vatUpdate`
  - `vatDelete`

- Zones
  - `zoneCreate`
  - `zoneUpdate`
  - `zoneDelete`

- Others
  - `negativeSale`
  - `storno`
  - `admin` (substitution for all roles combined)

## HTTP status codes

List of HTTP status codes used by API is mentioned below.

- Successful status codes
  - 200 - OK
  - 201 - Created
  - 202 - Accepted
  - 204 - No Content

- Error status codes with `API error` model in response body
  - 401 - Unauthorized (user is not logged in)
  - 403 - Forbidden (user is logged in but does not have sufficient access rights, or operation itself is forbidden)
  - 404 - Not found
  - 423 - Locked
  - 500 - Internal server error

- Error status codes with `API validation error` model in response body 
  - 422 - Unprocessable entity

Note: In OData calls, validation error has status code 400 instead of 422.

### Error response examples

#### API error

```
{
  "Message": "Invalid user name or password.",
  "Code": 1
}
```

API error model contains two fields:

- `Message`: contains error description. Error message may be propagated to user. See also [lozalization](#introduction/localization) section, to learn about error message language options.
- `Code`: error code describing error reason.

Following error codes are defined:

- 0 - `Unspecified`
- 1 - `Unauthenticated`
- 2 - `Unauthorized`
- 3 - `ValidationFailed`
- 4 - `LicenceExpired`
- 5 - `ResourceLocked`

#### API validation error

```
{
  "Message": "Validation failed"
  "Code": 3,
  "Errors": [
    {
      "Field": "Label",
      "Message": "Length must be in range between '1' and '3' characters.",
      "Code": 0
    }
  ]
}
```

In addition to message and code, collection of errors is part of validation error model.
Each element of errors collection contains:

- `Field`: name of field that contains validation error
- `Message`: description of validation rule that was violated
- `Code`: numeric code indicating which validation rule was violated

Following validation error codes are defined: TBD

- 0 - `Unspecified`

If some field violates more than one rule, two or more error elements with same field value are present in errors collection. 

## Localization

To receive localized error messages from server, each HTTP request may contain `Accept-Language` header.

Following culture codes are supported:

- `en-GB` : English - United Kingdom (default)
- `sk-SK` : Slovak - Slovakia

If `Accept-Language` header is not used, or contains unsupported value, default language is used.

## Ticket composition

This section covers references between ticket model and other resources.

- `CurrencyLabel` property refers to `Label` of [currency](#reference/currencies/currencies-collection) marked as domestic.
- `Customer` object refers to:
  - *Existing [customer](#reference/customers/customer)* if `CardId` has non-empty value. All fields are copied from actual customer account. 
  - *Anonymous customer*, if `CardId` has null value. Ticket is not linked to existing customer account.
- `Employee` refers to `Name` and `UserName` of an actual [user](#reference/users/user). User profile is usually retrieved via authorization procedure.
- `Location` refers to `Name` and `TableName` of an actual table in [Zone](#reference/zones/zone).
- `OriginDeviceName` refers to `Name` of [device](#reference/devices/device)

### Ticket Item composition

Each ticket item may be constructed from existing PLU or from anonymous PLU.

#### Ticket Item composition from existing PLU

- `PLU` object refers to an actual [PLU](#reference/plus/plu). All fields except `VatInfo` are copied from actual PLU.
- `PLU.VatInfo` refers to existing [VAT category](#reference/vat-categories/vat-categories-collection) with `Category` equal to `PLU.VatCategory`.

#### Ticket Item composition from anonymous PLU

- `PLU` object does not refer to an actual PLU. To indicate *anonymous* PLU, `StockName` must be equal to null and `Code` must be equal to 0. `ArticleCategoryLabel` is optional. 
- `PLU.VatInfo` refers to one of existing [VAT category](#reference/vat-categories/vat-categories-collection).

### Ticket Payment composition

- `PaymentType` object values refer to an actual [Payment type](#reference/payment-types/payment-types-collection).

## Ticket calculation guide

This section covers financial calculations on `Ticket` model. 

- all financial variables are rounded to *two* decimal places.
- all quantity variables are rounded to *three* decimal places.

### Ticket items calculations

Ticket item model consists only of following financial informations:

- Unit price btutto (price for one unit of product quantity)
- Discount rate (with value between 0 and 100)
- Quantity

All other financial values must be calculated additionally, and this section convers thier relationships.

#### Normalized discount rate

Normalized discount rate represents ticket items discount rate with value in range between 0 and 1. 

`DiscountRateNormalized = DiscountRate / 100`

#### Netto unit price

Netto unit price represents price after applying discount for one unit of product quantity.

`UnitPriceNetto = UnitPriceBrutto - (UnitPriceBrutto * DiscountRateNormalized)`

####  Total brutto price

Total brutto price is total item price before applying discount.

`TotalPriceBrutto = Quantity * UnitPriceBrutto`

#### Total netto price

Total netto price is total item price after applying discount.

`TotalPriceNetto = Quantity * UnitPriceNetto`

#### Discount amount

Discount amount represents difference between brutto and netto total price.

`DiscountAmount = TotalPriceBrutto - TotalPriceNetto`

### Ticket calculations

Ticket model financial informations consists only of ticket discount rate (with value between 0 and 100) and collection of ticket items.

#### Normalized discount rate

As in ticket item, normalized discount rate represents ticket items discount rate with value in range between 0 and 1. 

`DiscountRateNormalized = DiscountRate / 100`

#### Total brutto amount

Represents total amount before discount applying.

`TotalAmountBrutto` is equal to sum of `item.TotalPriceBrutto` values for each ticket item in items collection.

#### Total netto amount 

Represents total amount after discount applying. This is the amount customer is paying.

`TotalAmountNetto` is equal to sum of two values:

1. sum of `item.TotalPriceBrutto` for all items, where `item.PLU.IsDiscountAllowed` is equal to `false`
2. sum of `item.TotalPriceNetto - (item.TotalPriceNetto * ticket.discountRateNormalized)` for all items, where `item.PLU.IsDiscountAllowed` is equal to `true`.

#### Discount amount

Discount amount represents difference between brutto and netto total amount.

`DiscountAmount = TotalAmountBrutto - TotalAmountNetto`

### Example calculations

#### Example #1

Lets consider ticket with one ticket item, that has:

- quantity = 0.300 
- unit price brutto = 1.50
- discount rate = 5

Then:

- ticket item's unit price netto = 1.43
- ticket's total amount brutto = 0.45
- ticket's discount amount = 0.02
- ticket's total amount netto = 0.43

#### Example #2

Lets consider ticket with one ticket item, that has:

- quantity = 1.000
- unit price brutto = 2.90
- discount rate = 5

Then:

- ticket item's unit price netto = 2.76
- ticket's total amount brutto = 2.90
- ticket's discount amount = 0.14
- ticket's total amount netto = 2.76

#### Example #3

Lets consider ticket with two ticket items.

First ticket item:

- quantity = 1.000
- unit price brutto = 8.69 
- discount rate = 50

Second ticket item:

- quantity = 1.000
- unit price brutto = 8.69
- discount rate = 75

Then:

- first ticket item's unit price netto = 4.35
- first ticket item's discount amount = 4.34
- second ticket item's unit price netto = 2.17
- second ticket item's discount amount = 6.52
- ticket's total amount brutto = 17.38
- ticket's discount amount = 10.86
- ticket's total amount netto = 6.52

#### Example #4

Lets consider ticket with two ticket items.

Ticket:

- discount rate = 50

First ticket item:

- quantity = 1.000
- unit price brutto = 8.69 
- discount rate = 0

Second ticket item:

- quantity = 1.000
- unit price brutto = 8.69
- discount rate = 50

Then:

- ticket's total amount brutto = 17.38
- ticket's discount amount = 10.86
- ticket's total amount netto = 6.52

## OData support

Since API version 2.2., [OData 4](http://www.odata.org/documentation/) is supported.

URL addresses for each resource or RPC action are mentioned in relevant chapter of this documentation.

Please note several differences between original routes and OData routes:

1. HTTP status code is 400 instead of 422, in invalid payload scenarios.
2. JSON Serialization of dictionaries are different. This affects JSON representation of `device.Settings`, `fiscal.Settings`, `orderEndpoint.Settings` and `stockTransfer.Meta`.

Examples of classic and OData serialization of device model is provided below. Please note `Settings` property differences - serialization as *object* in regular API routes, and serialization as *key-value pair collection* in OData routes.

Example of classic serialization of device model:

```
{
  "_v": 1,
  "Name": "PDA1",
  "EnvName": "PDA",
  "Description": "PDA 1",
  "IsActive": true,
  "Roles": [
    "admin"
  ],
  "Preferences": {}
  "Settings": {
    "MaxQuantity": "10",
    "DefaultStockName": "S01",
    "DefaultFiscalName": "Fiscal1"
  }
}
```

Example of OData serialization of device model:
```
{
  "_v": 1,
  "Name": "PDA1",
  "EnvName": "PDA",
  "Description": "PDA 1",
  "IsActive": true,
  "Roles": [
    "admin"
  ],
  "Preferences": [],
  "Settings": [
    {
      "Key": "MaxQuantity",
      "Value": "10"
    },
    {
      "Key": "DefaultStockName",
      "Value": "S01"
    },
    {
      "Key": "DefaultFiscalName",
      "Value": "Fiscal1"
    }
  ]
}
```


# Group Auth 

Provides authentication functionality for authentication using JWT token.

## User Authentication [/api/auth/]

## Login [POST]

Login is performed by sending combination of user credentials 
(user name and password) and name of device (cash register).

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            Accept: application/json
        
    + Attributes (Credentials)

+ Response 200

    + Attributes (Authorization result)

+ Response 403

        {
          "Message": "Invalid user name or password.",
          "Code": 8
        }

## Get current user profile [GET]

After login, users current profile is accessible based on unique `TokenId`.

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200

    + Attributes (User profile)

+ Response 401 (application/json)

        {
          "Message": "Please log in.",
          "Code": 9
        }

## Logout [DELETE]

Logs out user based on provided `TokenId`. 
This action always returns successful status code, 
even if user with specified `TokenId` is already logged out.

+ Request

    + Headers

            X-Access-Token: {{TokenId}}

+ Response 204

# Group API Keys

API keys are used in authorization via HMAC authorization header.
To allow some API key usage during authorization, API key must be active (`IsActive` field must be set to `true`).

After API key usage, client will operate as user specified by `UserName` on device specified by `DeviceName`.

## API keys collection [/api/apikeys/]

+ Attributes (ApiKey)

### Get all API keys [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)
    
    + Attributes (array[ApiKey])

### Create API key [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (ApiKeyCreateContext)

+ Response 201 (application/json)

    + Attributes (ApiKey)

## Api key [/api/apikeys/{id}]

+ Parameters

    + id: 583569bb290e680e7405a6bf (string) - An unique Id of the API key.

### Get API key [GET]

Gets API key specified by its unique `Id`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (ApiKey)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update API key [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (ApiKey)

+ Response 200 (application/json)

    + Attributes (ApiKey)

### Delete API key [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (ApiKey)

## OData API keys collection [/odata/ApiKeys]

### Get all API keys [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)
    
    + Attributes (array[ApiKey])
    
### Create API key [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (ApiKeyCreateContext)

+ Response 201 (application/json)

    + Attributes (ApiKey)

## OData API key [/odata/ApiKeys('{id}')]

+ Parameters

    + id: 583569bb290e680e7405a6bf (string) - An unique Id of the API key.

### Get API key [GET]

Gets API key specified by its unique `Id`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (ApiKey)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update API key [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (ApiKey)

+ Response 200 (application/json)

    + Attributes (ApiKey)

### Delete API key [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (ApiKey)


# Group Article categories

Each product (PLU) belongs to article category.
Article category represents group of products (e.g. Desserts, Soups, ..).

## Article categories collection [/api/articlecategories/]

+ Attributes (Article category)

### Get all article categories [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

        [
          {
            "Label": "COF",
            "Description": "Coffee",
            "Color": null
          },
          {
            "Label": "PIZ",
            "Description": "Pizza",
            "Color": null
          },
          {
            "_v": 0,
            "Label": "OTH",
            "Description": "Others",
            "Color": null
          }
        ]

### Create article category [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Article category)

+ Response 201 (application/json)

    + Attributes (Article category)

## Article category [/api/articlecategories/{id}]

+ Parameters

    + id: PIZ (string) - An unique label of the article category.

### Get article category [GET]

Gets article category specified by its unique `Label`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Article category)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update article category [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Article category)

+ Response 200 (application/json)

    + Attributes (Article category)

### Delete article category [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Article category)

## OData article categories collection [/odata/ArticleCategories]

### Get all article categories [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

        [
          {
            "Label": "COF",
            "Description": "Coffee",
            "Color": null
          },
          {
            "Label": "PIZ",
            "Description": "Pizza",
            "Color": null
          },
          {
            "_v": 0,
            "Label": "OTH",
            "Description": "Others",
            "Color": null
          }
        ]

### Create article category [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Article category)

+ Response 201 (application/json)

    + Attributes (Article category)

## OData article category [/odata/ArticleCategories('{id}')']

+ Parameters

    + id: PIZ (string) - An unique label of the article category.

### Get article category [GET]

Gets article category specified by its unique `Label`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Article category)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update article category [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Article category)

+ Response 200 (application/json)

    + Attributes (Article category)

### Delete article category [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Article category)

# Group Companies

## Companies collection [/api/companies/{?ActiveOnly}]

+ Parameters

    + ActiveOnly: false (bool, optional) - Result will contain only companies marked as active.

+ Attributes (Company model)

### Get all companies [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)
    
    + Attributes (array[Company model])

### Create company [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Company model)

+ Response 201 (application/json)

    + Attributes (Company model)

## Company [/api/companies/{id}]

+ Parameters

    + id: 56e28558 (string) - An unique ID of the company.

### Get company [GET]

Gets company specified by its `Id`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Company model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update company [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Company model)

+ Response 200 (application/json)

    + Attributes (Company model)

### Delete company [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Company model)

## OData companies collection [/odata/Companies]

### Get all companies [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)
    
    + Attributes (array[Company model])

### Create company [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Company model)

+ Response 201 (application/json)

    + Attributes (Company model)

## OData company [/odata/Companies('{id}')]

+ Parameters

    + id: 56e28558 (string) - An unique ID of the company.

### Get company [GET]

Gets company specified by its `Id`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Company model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update company [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Company model)

+ Response 200 (application/json)

    + Attributes (Company model)

### Delete company [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Company model)

# Group Currencies

## Currencies collection [/api/currencies/{?ForeignOnly,DomesticOnly}]

Collection of currencies contains exactly **one** currency marked as domestic.
Every system transaction is executed in domestic currency.

+ Parameters

    + ForeignOnly: false (bool, optional) - Result will contain only currencies not marked as domestic.
    + DomesticOnly: true (bool, optional) - Result will contain only currencies marked as domestic.

+ Attributes (Currency model)

### Get all currencies [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

        [
          {
            "IsDomestic": true,
            "Label": "EUR",
            "Sign": "€",
            "ExchangeRate": 1,
            "Description": "Euro"
          },
          {
            "IsDomestic": false,
            "Label": "USD",
            "Sign": "$",
            "ExchangeRate": 1.1214,
            "Description": "US Dollar"
          },
          {
            "IsDomestic": false,
            "Label": "CZK",
            "Sign",
            "ExchangeRate": 27.0529,
            "Description": "Czech Crown"
          }
        ]

### Create currency [POST]

If currency marked as domestic is provided, original domestic currency is changed to non-domestic automatically.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Currency model)

+ Response 201 (application/json)

    + Attributes (Currency model)

## Currency [/api/currencies/{id}]

+ Parameters

    + id: EUR (string) - An unique label of the currency.

### Get currency [GET]

Gets currency specified by its `Label`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Currency model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update currency [PUT]

If currency marked as domestic is provided, original domestic currency is changed to non-domestic automatically.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Currency model)

+ Response 200 (application/json)

    + Attributes (Currency model)

### Delete currency [DELETE]

Only currency not marked as domestic can be deleted.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Currency model)

## OData currencies collection [/odata/Currencies]

### Get all currencies [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

        [
          {
            "IsDomestic": true,
            "Label": "EUR",
            "Sign": "€",
            "ExchangeRate": 1,
            "Description": "Euro"
          },
          {
            "IsDomestic": false,
            "Label": "USD",
            "Sign": "$",
            "ExchangeRate": 1.1214,
            "Description": "US Dollar"
          },
          {
            "IsDomestic": false,
            "Label": "CZK",
            "Sign",
            "ExchangeRate": 27.0529,
            "Description": "Czech Crown"
          }
        ]

### Create currency [POST]

If currency marked as domestic is provided, original domestic currency is changed to non-domestic automatically.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Currency model)

+ Response 201 (application/json)

    + Attributes (Currency model)

## OData currency [/odata/Currencies('{id}')']

+ Parameters

    + id: EUR (string) - An unique label of the currency.

### Get currency [GET]

Gets currency specified by its `Label`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Currency model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update currency [PUT]

If currency marked as domestic is provided, original domestic currency is changed to non-domestic automatically.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Currency model)

+ Response 200 (application/json)

    + Attributes (Currency model)

### Delete currency [DELETE]

Only currency not marked as domestic can be deleted.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Currency model)

# Group Customers

## Customers collection [/api/customers/{?ActiveOnly}]

+ Parameters

    + ActiveOnly: true (bool, optional) - Result will contain only customer accounts marked as active.

+ Attributes (Customer model)

### Get all customers [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (array[Customer model])

### Create customer [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Customer model)

+ Response 201

    + Attributes (Customer model)

## Customer [/api/customer/{id}]

+ Parameters

    + id: 435b3455hf9 (string) - Unique customer card Id

### Get customer [GET]

Gets customer account specified by its unique card Id.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

    + Attributes (Customer model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update customer [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Customer model)

+ Response 200

    + Attributes (Customer model)

### Delete customer [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

    + Attributes (Customer model)

## OData customers collection [/odata/Customers]

### Get all customers [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (array[Customer model])

### Create customer [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Customer model)

+ Response 201

    + Attributes (Customer model)

## OData customer [/odata/Customers('{id}')]

+ Parameters

    + id: 435b3455hf9 (string) - Unique customer card Id

### Get customer [GET]

Gets customer account specified by its unique card Id.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

    + Attributes (Customer model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update customer [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Customer model)

+ Response 200

    + Attributes (Customer model)

### Delete customer [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

    + Attributes (Customer model)

# Group Daily sales reports

Fiscal printer sends record closure information after each closed ticket or cash transfer.
Daily sales report record is created automatically by API, if no such record exists (specified by fiscal name, fiscal memory serial number and daily sales report number).
Therefore no daily sales report can be created via `POST` route.
Each ticket belongs to one daily sales report (this information is stored in `CloseInfo` property).

Daily sales report record is modified by calling following actions on fiscal printer:

- [cash transfer](#reference/fiscals/cash-transfer) - new element is added to cash transfers conllection
- [daily sales report closure](#reference/fiscals/daily-sales-report/print-daily-sales-report) - fiscal info model is fulfilled and daily sales report is considered as *closed*.

## Daily sales reports collection [/api/dailysalesreports/{?ClosedOnly,OpenedOnly,FiscalName,CloseDateFrom,CloseDateTo,NumberFrom,NumberTo}]

+ Parameters

    + ClosedOnly: false (optional, boolean) - Result will contain only closed daily sales reports, if set to true.
    + OpenedOnly: true (optional, boolean) - Result will contain only opened daily sales reports, if set to true.
    + FiscalName: FiscalPrinter1 (optional, string) - Result will contain only daily sales reports closed in fiscal with specified fiscal name, if this parameter is provided.
    + CloseDateFrom: `2016-06-13T10:25:00.000Z` (optional, string) - Result will contain only daily sales reports closed after specified date (ISO8601 format), if this parameter is provided.
    + CloseDateTo: `2016-06-13T10:25:00.000Z` (optional, string) - Result will contain only daily sales reports closed before specified date (ISO8601 format), if this parameter is provided.
    + NumberFrom: 1 (optional, number) - Result will contain only daily sales reports with number greater or equal to this parameter, if this parameter is provided.
    + NumberTo: 2 (optional, number) - Result will contain only daily sales reports with number smaller or equal to this parameter, if this parameter is provided.

+ Attributes (DailySalesReport model)

### Get all daily sales reports [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)
    
    + Attributes (array[DailySalesReport model])

## Daily sales report [/api/dailysalesreports/{id}]

+ Parameters

    + id: 56e28558 (string) - An unique ID of the daily sales report.

### Get daily sales report [GET]

Gets daily sales report specified by its `Id`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (DailySalesReport model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Update daily sales report [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (DailySalesReport model)

+ Response 200 (application/json)

    + Attributes (DailySalesReport model)

### Delete daily sales report [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (DailySalesReport model)

## OData daily sales reports collection [/odata/DailySalesReports]

### Get all daily sales reports [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)
    
    + Attributes (array[DailySalesReport model])

## OData daily sales report [/odata/DailySalesReports('{id}')]

+ Parameters

    + id: 56e28558 (string) - An unique ID of the daily sales report.

### Get daily sales report [GET]

Gets daily sales report specified by its `Id`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (DailySalesReport model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Update daily sales report [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (DailySalesReport model)

+ Response 200 (application/json)

    + Attributes (DailySalesReport model)

### Delete daily sales report [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (DailySalesReport model)

# Group Devices

Each cash register application or any other software application in ecosystem is represented by device,
to store its settings or preferences.

## Devices collection [/api/devices/]

+ Attributes (Device model)

### Get all devices [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

        [
          {
            "IsActive": true,
            "Name": "P01",
            "EnvName": "CashRegister",
            "Description": "Pokladňa 1",
            "Settings": {
              "MaxQuantity": "200",
              "OpenedPrices": "false",
              "NoticeOnNegativeSale": "false",
              "SecretCustomersCardId": "false",
              "SecretEmployeesId": "false",
              "VisibleQuantities": "false",
              "CustomerMode": "false",
              "DefaultFiscalName": "Fiscal1",
              "DefaultOrderEndpointName": "00",
              "DefaultStockName": "S01",
              "PrintPluStats": "false",
              "SortPlusBy": "Code",
              "LogoutAfterSaleExit": "true"
            },
            "Roles": [
              "admin"
            ],
            "Preferences": {}
          },
          {
            "IsActive": true,
            "Name": "BackOffice",
            "EnvName": "BackOffice",
            "Description": "BackOffice",
            "Settings": {},
            "Roles": [
              "admin"
            ],
            "Preferences": {}
          },
          {
            "IsActive": true,
            "Name": "PDA1",
            "EnvName": "PDA",
            "Description": "Smartphone for cashier",
            "Settings": {
              "MaxQuantity": "10",
              "DefaultStockName": "S01",
              "DefaultFiscalName": "Fiscal1"
            },
            "Roles": [
              "admin"
            ],
            "Preferences": {}
          },
          {
            "IsActive": true,
            "Name": "mPOS Link",
            "EnvName": "Tool",
            "Description": "mPOS Link tool for importing and exporting data",
            "Settings": {},
            "Roles": [
              "admin"
            ],
            "Preferences": {}
          }
        ]

### Create device [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Device model)

+ Response 201

    + Attributes (Device model)

## Device [/api/devices/{id}]

+ Parameters

    + id: CashRegister1 (string) - Unique device name

### Get device [GET]

Gets device specified by its unique `name`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

    + Attributes (Device model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update device [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Device model)

+ Response 200

    + Attributes (Device model)

### Delete device [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

    + Attributes (Device model)

## OData devices collection [/odata/Devices]

+ Attributes (DeviceOData)

### Get all devices [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

        [
          {
            "@odata.context": "{serverAddress}/odata/$metadata#Devices",
            "value": [
              {
                "Name": "BackOffice",
                "IsActive": true,
                "EnvName": "BackOffice",
                "Description": "BackOffice",
                "Roles": [
                  "admin"
                ],
                "_v": 1,
                "Preferences": [],
                "Settings": []
              },
              {
                "Name": "PDA1",
                "IsActive": true,
                "EnvName": "PDA",
                "Description": "PDA 1",
                "Roles": [
                  "admin"
                ],
                "_v": 1,
                "Preferences": [],
                "Settings": [
                  {
                    "Key": "MaxQuantity",
                    "Value": "10"
                  },
                  {
                    "Key": "DefaultStockName",
                    "Value": "S01"
                  },
                  {
                    "Key": "DefaultFiscalName",
                    "Value": "Fiscal1"
                  }
                ]
              },
              {
                "Name": "P01",
                "IsActive": true,
                "EnvName": "CashRegister",
                "Description": "POS1",
                "Roles": [
                  "admin"
                ],
                "_v": 11,
                "Preferences": [],
                "Settings": [
                  {
                    "Key": "AutomaticTicket",
                    "Value": "False"
                  },
                  {
                    "Key": "MaxQuantity",
                    "Value": "200"
                  },
                  {
                    "Key": "OpenedPrices",
                    "Value": "False"
                  },
                  {
                    "Key": "NoticeOnNegativeSale",
                    "Value": "False"
                  },
                  {
                    "Key": "SecretCustomersCardId",
                    "Value": "False"
                  },
                  {
                    "Key": "SecretEmployeesId",
                    "Value": "False"
                  },
                  {
                    "Key": "VisibleQuantities",
                    "Value": "False"
                  },
                  {
                    "Key": "CustomerMode",
                    "Value": "True"
                  },
                  {
                    "Key": "DefaultFiscalName",
                    "Value": "Fiscal1"
                  }
                ]
              }
            ]
          }
        ]

### Create device [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (DeviceOData)

+ Response 201

    + Attributes (DeviceOData)

## OData device [/odata/Devices('{id}')]

+ Parameters

    + id: CashRegister1 (string) - Unique device name

### Get device [GET]

Gets device specified by its unique `name`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

    + Attributes (DeviceOData)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update device [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (DeviceOData)

+ Response 200

    + Attributes (DeviceOData)

### Delete device [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

    + Attributes (DeviceOData)

# Group Fiscals

Fiscals represents receipt printers.
Based on `Type`, settings object may contain various fields.

## Fiscals collection [/api/fiscals/]

+ Attributes (Fiscal model)

### Get all fiscals [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

        [
          {
            "IsActive": true,
            "Name": "Virtual fiscal printer",
            "Type": "Virtual",
            "Version": "1.0",
            "DKP": "1001020304050001",
            "Settings": {}
          },
          {
            "IsActive": true,
            "Name": "Varos fiscal printer",
            "Type": "Varos",
            "Version": "1.0",
            "DKP": "1001020304050002",
            "Settings": {
              "ComPort": "COM3",
              "BaudRate": "9600"
            }
          },
          {
            "IsActive": true,
            "Name": "Remote fiscal printer",
            "Type": "Remote",
            "Version": "1.0",
            "DKP": "1001020304050003",
            "Settings": {
              "Server": "ws://192.168.0.10:3003",
              "ResponseTimeout": "100000"
            }
          },
          {
            "IsActive": true,
            "Name": "sirk",
            "Type": "Sirk",
            "Version": "1.0",
            "DKP": "1001020304050004",
            "Settings": {
              "ComPort": "COM4",
              "BaudRate": "115200"
            }
          }
        ]

### Create fiscal [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Fiscal model)

+ Response 201

    + Attributes (Fiscal model)

## Fiscal [/api/fiscal/{id}]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Get fiscal [GET]

Gets fiscal specified by its unique name.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

    + Attributes (Fiscal model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }


### Create or update fiscal [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Fiscal model)

+ Response 200

    + Attributes (Fiscal model)

### Delete fiscal [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

    + Attributes (Fiscal model)

## Cash drawer [/api/fiscal/{id}/open_drawer]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Open drawer [POST]

Opens cash drawer on specified device, if any cash drawer is attached.
This is an RPC operation that returns no content.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 204

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## Cash transfer [/api/fiscal/{id}/cash_transfer]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Create cash transfer [POST]

Performs cash transfer operation on active fiscal device, 
and saves record to current daily sales report, which is returned in response body.
This is an RPC operation.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (CashTransfer)

+ Response 200

    + Attributes (DailySalesReport model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## Record copy [/api/fiscal/{id}/print_record_copy]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Print record copy [POST]

Prints copy of specified record on fiscal printer.
Daily sales report must be specified in request body via its numer or close date.
This is an RPC operation that returns no content.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (RecordCopyContext)

+ Response 204

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## Last record copy [/api/fiscal/{id}/print_last_record_copy]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Print last record copy [POST]

Prints copy of last record printed on fiscal printer.
This is an RPC operation that returns no content.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 204

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## Overview sales report [/api/fiscal/{id}/print_overview_sales_report]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Print overview sales report [POST]

Prints overview sales report on selected fiscal device.
This is an RPC operation that returns no content.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 204

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## Daily sales report [/api/fiscal/{id}/print_daily_sales_report]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Print daily sales report [POST]

Prints daily sales report on selected fiscal device.
This is an RPC operation.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

    + Attributes (DailySalesReport model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## Daily sales report copy [/api/fiscal/{id}/print_daily_sales_report_copy]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Print daily sales report copy [POST]

Daily sales report is specified by its number or close date.
This is an RPC operation that returns no content.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (DailySalesReportCopyContext)

+ Response 204

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## Last daily sales report copy [/api/fiscal/{id}/print_last_daily_sales_report_copy]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Print last daily sales report copy [POST]

Prints copy of last closed daily sales report on specified fiscal device.
This is an RPC operation that returns no content.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 204

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## Summary interval sales report [/api/fiscal/{id}/print_summary_intrerval_sales_report]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Print summary interval sales report [POST]

Daily sales report range must be specified in request body via pair of daily sales reports numbers or pair of daily sales report close dates.
This is an RPC operation that returns no content.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (IntervalSalesReportContext)

+ Response 204

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## Detailed interval sales report [/api/fiscal/{id}/print_detailed_intrerval_sales_report]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Print detailed interval sales report [POST]

Daily sales report range must be specified in request body via pair of daily sales reports numbers or pair of daily sales report close dates.
This is an RPC operation that returns no content.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (IntervalSalesReportContext)

+ Response 204

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## Nonfiscal record [/api/fiscals/{id}/print_nonfiscal_record]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Print nonfiscal record [POST]

This is used for nonfiscal record (such as statistics) printing on fiscal printer. 
This is an RPC operation that returns no content.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (NonfiscalRecordContext)

+ Response 204

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }


## OData fiscals collection [/odata/Fiscals]

+ Attributes (FiscalOData)

### Get all fiscals [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

        [
          {
            "IsActive": true,
            "Name": "Virtual fiscal printer",
            "Type": "Virtual",
            "Version": "1.0",
            "DKP": "1001020304050001",
            "Settings": []
          },
          {
            "IsActive": true,
            "Name": "Varos fiscal printer",
            "Type": "Varos",
            "Version": "1.0",
            "DKP": "1001020304050002",
            "Settings": [
              {
                "Key": "ComPort",
                "Value": "COM4"
              },
              {
                "Key": "BaudRate",
                "Value": "115200"
              }
            ]
          },
          {
            "IsActive": true,
            "Name": "Remote fiscal printer",
            "Type": "Remote",
            "Version": "1.0",
            "DKP": "1001020304050003",
            "Settings": [
              {
                "Key": "Server",
                "Value": "ws://127.0.0.1"
              },
              {
                "Key": "ResponseTimeout",
                "Value": "10000"
              }
            ]
          },
          {
            "IsActive": true,
            "Name": "sirk",
            "Type": "Sirk",
            "Version": "1.0",
            "DKP": "1001020304050004",
            "Settings": [
              {
                "Key": "ComPort",
                "Value": "COM4"
              },
              {
                "Key": "BaudRate",
                "Value": "115200"
              }
            ]
          }
        ]

### Create fiscal [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (FiscalOData)

+ Response 201

    + Attributes (FiscalOData)

## OData fiscal [/odata/Fiscals('{id}')]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Get fiscal [GET]

Gets fiscal specified by its unique name.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

    + Attributes (FiscalOData)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update fiscal [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (FiscalOData)

+ Response 200

    + Attributes (FiscalOData)

### Delete fiscal [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

    + Attributes (FiscalOData)

## OData cash drawer [/odata/Fiscals('{id}')/FiscalService.OpenDrawer]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Open drawer [POST]

Opens cash drawer on specified device, if any cash drawer is attached.
This is an RPC operation that returns no content.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 204

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## OData cash transfer [/odata/Fiscals('{id}')/FiscalService.CashTransfer]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Create cash transfer [POST]

Performs cash transfer operation on active fiscal device, 
and saves record to current daily sales report, which is returned in response body.
This is an RPC operation.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (CashTransferOData)

+ Response 200

    + Attributes (DailySalesReport model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## OData record copy [/odata/Fiscals('{id}')/FiscalService.PrintRecordCopy]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Print record copy [POST]

Prints copy of specified record on fiscal printer.
Daily sales report must be specified in request body via its numer or close date.
This is an RPC operation that returns no content.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (RecordCopyContextOData)

+ Response 204

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## OData last record copy [/odata/Fiscals('{id}')/FiscalService.PrintLastRecordCopy]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Print last record copy [POST]

Prints copy of last record printed on fiscal printer.
This is an RPC operation that returns no content.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 204

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## OData overview sales report [/odata/Fiscals('{id}')/FiscalService.PrintOverviewSalesReport]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Print overview sales report [POST]

Prints overview sales report on selected fiscal device.
This is an RPC operation that returns no content.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 204

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## OData daily sales report [/odata/Fiscals('{id}')/FiscalService.DoDailySalesReport]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Print daily sales report [POST]

Prints daily sales report on selected fiscal device.
This is an RPC operation.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

    + Attributes (DailySalesReport model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## OData daily sales report copy [/odata/Fiscals('{id}')/FiscalService.PrintDailySalesReportCopy]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Print daily sales report copy [POST]

Daily sales report is specified by its number or close date.
This is an RPC operation that returns no content.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (DailySalesReportCopyContextOData)

+ Response 204

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## OData last daily sales report copy [/odata/Fiscals('{id}')/FiscalService.PrintLastDailySalesReportCopy]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Print last daily sales report copy [POST]

Prints copy of last closed daily sales report on specified fiscal device.
This is an RPC operation that returns no content.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 204

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## OData summary interval sales report [/odata/Fiscals('{id}')/FiscalService.PrintSummaryIntervalSalesReport]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Print summary interval sales report [POST]

Daily sales report range must be specified in request body via pair of daily sales reports numbers or pair of daily sales report close dates.
This is an RPC operation that returns no content.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (IntervalSalesReportContextOData)

+ Response 204

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## OData detailed interval sales report [/odata/Fiscals('{id}')/FiscalService.PrintDetailedIntervalSalesReport]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Print detailed interval sales report [POST]

Daily sales report range must be specified in request body via pair of daily sales reports numbers or pair of daily sales report close dates.
This is an RPC operation that returns no content.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (IntervalSalesReportContextOData)

+ Response 204

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## OData Nonfiscal record [/odata/Fiscals('{id}')/FiscalService.PrintNonfiscalRecord]

+ Parameters

    + id: Fiscal1 (string) - Unique fiscal name

### Print nonfiscal record [POST]

This is used for nonfiscal record (such as statistics) printing on fiscal printer. 
This is an RPC operation that returns no content.
Fiscal device must be marked as active to perform this action.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (NonfiscalRecordContextOData)

+ Response 204

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

# Group Licence

Licence resource is *whitelisted* during authorization procedure and is accessable without authorization.

## Licence [/api/licence/]

+ Attributes (Licence model)

### Get licence [GET]

+ Request

    + Header
    
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Licence model)

### Activate licence [POST]

To extend or modify the licence, user must provide activation code.

+ Request

    + Header
    
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (string)

+ Response 200 (application/json)

    + Attributes (Licence model)

## Licence request code [/api/licence/requestcode{?MaxDevicesCount}]

+ Parameters

    + MaxDevicesCount: 10 (optional, number) - Maxumal number of concurrent sale devices (cash register and PDA envs) logged in to system at one time. If null, current licence value is desired (1 = default, if no licence exists).

### Get licence request code [GET]

Request code is used to request activation code (to activate licence) from licencing authority.
This is how request code may be retrieved from API. Licencing authority uses request code to generate activation code.

+ Request

    + Header

            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (string)

# Group Order endpoints

Order endpoints represents an actual device that is used to process orders.

## Order endpoints collection [/api/orderendpoints/]

+ Attributes (OrderEndpoint)

### Get all order endpoints [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

        [
          {
            "Name" : "Bar"
            "Type" : "SRP350",
            "Address" : "\\192.168.1.123\Bar",
            "IsActive" : true,
            "Settings" : {
              "CopiesCount" : "2",
              "DoubleHeightFont" : "true",
              "DoubleWidthFont" : "false",
              "HighlightOrderNumber" : "false",
              "IsBeepEnabled" : "false",
              "SkipItemsPrinting" : "false"
            }
          }
        ]
    
### Create order endpoint [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (OrderEndpoint)

+ Response 200 (application/json)

    + Attributes (OrderEndpoint)

## Order endpoint [/api/orderendpoints/{id}]

+ Parameters

    + id: KitchenPrinter (string) - An unique name of the order endpoint.

### Get order endpoint [GET]

Gets order endpoint specified by its unique `Name`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (OrderEndpoint)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update order endpoint [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (OrderEndpoint)

+ Response 200 (application/json)

    + Attributes (OrderEndpoint)

### Delete order endpoint [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (OrderEndpoint)

## OData order endpoints collection [/odata/OrderEndpoints]

+ Attributes (OrderEndpointOData)

### Get all order endpoints [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

        {
          "@odata.context": "{serverAddress}/odata/$metadata#OrderEndpoints",
          "value": [
            {
              "Name": "Bar",
              "IsActive": true,
              "Address" : "\\192.168.1.123\Bar",
              "Type": "SRP350",
              "Settings": [
                {
                  "Key": "CopiesCount",
                  "Value": "1"
                },
                {
                  "Key": "DoubleHeightFont",
                  "Value": "true"
                },
                {
                  "Key": "DoubleWidthFont",
                  "Value": "false"
                },
                {
                  "Key": "HighlightOrderNumber",
                  "Value": "false"
                },
                {
                  "Key": "IsBeepEnabled",
                  "Value": "false"
                },
                {
                  "Key": "SkipItemsPrinting",
                  "Value": "false"
                }
              ]
            }
          ]
        }

### Create order endpoint [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (OrderEndpointOData)

+ Response 200 (application/json)

    + Attributes (OrderEndpointOData)

## OData order endpoint [/odata/OrderEndpoints('{id}')]

+ Parameters

    + id: KitchenPrinter (string) - An unique name of the order endpoint.

### Get order endpoint [GET]

Gets order endpoint specified by its unique `Name`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (OrderEndpointOData)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update order endpoint [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (OrderEndpointOData)

+ Response 200 (application/json)

    + Attributes (OrderEndpointOData)

### Delete order endpoint [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (OrderEndpointOData)

# Group Orders

Orders are automatically created after each ticket update. Each order contains context informations about products and order endpoint on which products will be processed on.

Order status is an numeric enumeration of following values:

0. `Unknown` - Default state. There was no attempt to perform order processing 
1. `Created` - There was no attempt to perform order processing
2. `Sent` - Order has been successfuly sent to endpoint
3. `Delivered` - Order has been successfuly delivered to endpoint. Endpoint may refuse or accept this order.
4. `Refused` - Order was refused by order endpoint.
5. `Failed` - There was attempt to send/deliver order, which was not completed due to an error.
6. `Accepted` - Order was successfuly delivered, shown and accepted by recipient. For example chief received the order and started making the dish by accepting it.
7. `ProcessSkiped` - Processing of order was skipped. Order endpoint device was offline.
8. `Processed`  - Order has been marked as completed by endpoint.

Order is processable when at least one order item is processable.
Order is processed when all order items are processed.

Order item is processable when is processable on at least one order endpoint.
Order item is processed when is processed on all order endpoints.

Order item is processable on endpoint when status is equal to `Created` or `Failed`.
Order item is processed on endpoint when status is equal to `Refused`, `Processed` or `ProcessSkipped`


## Orders collection [/api/orders/{?OnlyOpened,OnlyClosed,TicketIds}]

+ Parameters

    + OnlyOpened: false (optional, boolean) - Result will contain only orders that are not completely processed by order endpoints.
    + OnlyClosed: false (optional, boolean) - Result will contain only orders that are completely processed by order endpoints.
    + TicketIds: true (optional, array[string]) - Result will contain only orders relevant to specified tickets.

+ Attributes (Order model)

### Get all orders [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (array[Order model])

## Order [/api/orders/{id}]

+ Parameters

    + id: 435b3455hf9 (string) - Unique order identifier

### Get order [GET]

Gets order specified by its unique identifier.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

    + Attributes (Order model)

+ Response 404
    
        {
          "Message": "Resource not found.",
          "Code": 7
        }

## Orders processing [/api/orders/process]

If product is "Steak" and order endpoint is "KitchenPrinter", order processing refers to printing order on kitchen printer. 

### Process orders [POST]

Starts orders processing procedure. This is an RPC operation.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (ProcessOrdersQuery)

+ Response 202

    + Attributes (array[Order model])

## Order status updating [/api/orders/{id}/status]

+ Parameters

    + id: 435b3455hf9 (string) - Unique order identifier
    
### Set order status on all endpoints of all items [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (OrderStatusContext)

+ Response 202

    + Attributes (Order model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## Order item status updating [/api/orders/{id}/items/{itemId}/status]

+ Parameters

    + id: 435b3455hf9 (string) - Unique order identifier
    + itemId: 1 (number) - Order item identifier

### Set order status on all endpoints of specified order item [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (OrderStatusContext)

+ Response 202

    + Attributes (Order model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## Order endpoint status updating [/api/orders/{id}/endpoints/{endpointName}/status]

+ Parameters

    + id: 435b3455hf9 (string) - Unique order identifier
    + endpointName: KitchenPrinter (string) - Order endpoint unique name

### Set order status on specified endpoint of all order items [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (OrderStatusContext)

+ Response 202

    + Attributes (Order model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## OData orders collection [/odata/Orders]

+ Attributes (Order model)

### Get all orders [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (array[Order model])

## OData order [/odat/Orders('{id}')]

+ Parameters

    + id: 435b3455hf9 (string) - Unique order identifier

### Get order [GET]

Gets order specified by its unique identifier.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200

    + Attributes (Order model)

+ Response 404
    
        {
          "Message": "Resource not found.",
          "Code": 7
        }

## OData orders processing [/odata/Orders/OrderService.Process]

If product is "Steak" and order endpoint is "KitchenPrinter", order processing refers to printing order on kitchen printer. 

### Process orders [POST]

Starts orders processing procedure. This is an RPC operation.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (ProcessOrdersQueryOData)

+ Response 202

    + Attributes (array[Order model])

## OData order status updating [/odata/Orders('{id}')/OrderService.SetOrderStatus]

+ Parameters

    + id: 435b3455hf9 (string) - Unique order identifier
    
### Set order status on all endpoints of all items [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (OrderStatusContextOData)

+ Response 202

    + Attributes (Order model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## OData order item status updating [/odata/Orders('{id}')/OrderService.SetOrderItemStatus]

+ Parameters

    + id: 435b3455hf9 (string) - Unique order identifier

### Set order status on all endpoints of specified order item [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (OrderItemStatusContextOData)

+ Response 202

    + Attributes (Order model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## OData order endpoint status updating [/odata/Orders('{id}')/OrderService.SetOrderEndpointStatus]

+ Parameters

    + id: 435b3455hf9 (string) - Unique order identifier

### Set order status on specified endpoint of all order items [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (OrderEndpointStatusContextOData)

+ Response 202

    + Attributes (Order model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }


# Group Payment types

Payment type represents method of payment, such as cash, credit card, etc.

## Payment types collection [/api/paymenttypes/{?ActiveOnly,Category}]

+ Parameters

    + ActiveOnly: false (bool, optional) - Result will contain only payment types marked as active.
    + Category: 1 (number, optional) - Resuil will contain only payment type(s) with specified category

+ Attributes (Payment type)

### Get all payment types [GET]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200

        [
          {
            "Number": 1,
            "Category": "CashPaymentType",
            "IsActive": true,
            "Description": "Cash",
            "IsChangeable": true
          },
          {
            "Number": 2,
            "Category": "CreditCardPaymentType",
            "IsActive": true,
            "Description": "Credit card",
            "IsChangeable": false
          },
          {
            "Number": 3,
            "Category": "OtherPaymentType",
            "IsActive": false,
            "Description": "Voucher",
            "IsChangeable": false
          },
          {
            "Number": 4,
            "Category": "OtherPaymentType",
            "IsActive": false,
            "Description": "Check",
            "IsChangeable": false
          },
          {
            "Number": 5,
            "Category": "OtherPaymentType",
            "IsActive": false,
            "Description": "Invoice",
            "IsChangeable": false
          },
          {
            "Number": 6,
            "Category": "OtherPaymentType",
            "IsActive": false,
            "Description": "Uknown",
            "IsChangeable": false
          },
          {
            "Number": 7,
            "Category": "OtherPaymentType",
            "IsActive": false,
            "Description": "Uknown",
            "IsChangeable": false
          },
          {
            "Number": 8,
            "Category": "OtherPaymentType",
            "IsActive": false,
            "Description": "Uknown",
            "IsChangeable": false
          },
          {
            "Number": 9,
            "Category": "OtherPaymentType",
            "IsActive": false,
            "Description": "Uknown",
            "IsChangeable": false
          },
          {
            "Number": 10,
            "Category": "OtherPaymentType",
            "IsActive": false,
            "Description": "Uknown",
            "IsChangeable": false
          }
        ]

### Create payment type [POST]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

    + Attributes (Payment type)

+ Response 201 (application/json)

    + Attributes (Payment type)

## Payment type [/paymenttypes/{id}]

+ Parameters

    + id: 1 (number) - An unique identifier of payment type.

### Get payment type [GET]

Gets payment type specified by its `Number`.

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Payment type)

### Create or update payment type [PUT]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

    + Attributes (Payment type)

+ Response 200 (application/json)

    + Attributes (Payment type)

### Delete payment type [DELETE]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Payment type)

## OData payment types collection [/odata/PaymentTypes]

### Get all payment types [GET]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200

        [
          {
            "Number": 1,
            "Category": "CashPaymentType",
            "IsActive": true,
            "Description": "Cash",
            "IsChangeable": true
          },
          {
            "Number": 2,
            "Category": "CreditCardPaymentType",
            "IsActive": true,
            "Description": "Credit card",
            "IsChangeable": false
          },
          {
            "Number": 3,
            "Category": "OtherPaymentType",
            "IsActive": false,
            "Description": "Voucher",
            "IsChangeable": false
          },
          {
            "Number": 4,
            "Category": "OtherPaymentType",
            "IsActive": false,
            "Description": "Check",
            "IsChangeable": false
          },
          {
            "Number": 5,
            "Category": "OtherPaymentType",
            "IsActive": false,
            "Description": "Invoice",
            "IsChangeable": false
          },
          {
            "Number": 6,
            "Category": "OtherPaymentType",
            "IsActive": false,
            "Description": "Uknown",
            "IsChangeable": false
          },
          {
            "Number": 7,
            "Category": "OtherPaymentType",
            "IsActive": false,
            "Description": "Uknown",
            "IsChangeable": false
          },
          {
            "Number": 8,
            "Category": "OtherPaymentType",
            "IsActive": false,
            "Description": "Uknown",
            "IsChangeable": false
          },
          {
            "Number": 9,
            "Category": "OtherPaymentType",
            "IsActive": false,
            "Description": "Uknown",
            "IsChangeable": false
          },
          {
            "Number": 10,
            "Category": "OtherPaymentType",
            "IsActive": false,
            "Description": "Uknown",
            "IsChangeable": false
          }
        ]

### Create payment type [POST]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

    + Attributes (Payment type)

+ Response 201 (application/json)

    + Attributes (Payment type)

## OData payment type [/odata/PaymentTypes('{id}')]

+ Parameters

    + id: 1 (number) - An unique identifier of payment type.

### Get payment type [GET]

Gets payment type specified by its `Number`.

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Payment type)

### Create or update payment type [PUT]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

    + Attributes (Payment type)

+ Response 200 (application/json)

    + Attributes (Payment type)

### Delete payment type [DELETE]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Payment type)

# Group PLUs

PLU represents merchandise, which is sold via cash register.
Each PLU is uniquely defined by its `Id` or unique combination of `StockName` and `Code`.

There are several types of PLUs defined in system:

1. `Recipe` - Only type of PLU, which may have collection of receipt items.
2. `StockItem` - Only type PLU which has minimum stock quantity, stock value and stock quantity. 
3. `Credit` - If ticket item with credit type is included in ticket linked with customer account, its total amount affets financial credit of this customer account.
4. `Discount` - Enables user to define discount at fixed prices, because tickets provides percentual discounts only. Retail price has usually negative value.
5. `Service` - Alternative to discount PLU type. Retail prices has usually positive value.

## PLUs collection [/api/plus/{?StockName,RecipesOnly,StockItemsOnly,DiscountsOnly,ServicesOnly,CreditsOnly,ActiveOnly,Code}]

+ Parameters

    + StockName: Stock01 (optional, string) - Reuslt will contain only PLUs from specified stock
    + RecipesOnly: false (optional, boolean) - Result will contain only PLUs with type set to recipe, if set to true
    + StockItemsOnly: false (optional, boolean) - Result will contain only PLUs with type set to stock item, if set to true
    + DiscountsOnly: false (optional, boolean) - Result will contain only PLUs with type set to discount, if set to true
    + ServicesOnly: false (optional, boolean) - Result will contain only PLUs with type set to service, if set to true
    + CreditsOnly: false (optional, boolean) - Result will contain only PLUs with type set to credit, if set to true
    + ActiveOnly: true (optional, boolean) - Result will contain only plus marked as active
    + Code: 123 (optional, number) - Result will contain only plus with specified code

### Get all PLUs [GET]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (array[PLU model])

### Create PLU [POST]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

    + Attributes (PLU model)

+ Response 201

    + Attributes (PLU model)

## PLU [/api/plus/{id}/]

+ Parameters

    + id: 56e28558 - plu Id.
    
+ Attributes (PLU model)

### Get PLU [GET]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200

    + Attributes (PLU model)

+ Response 404

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update PLU [PUT]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

    + Attributes (PLU model)

+ Response 200

    + Attributes (PLU model)

### Delete PLU [DELETE]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200

    + Attributes (PLU model)

+ Response 404

        {
          "Message": "Resource not found.",
          "Code": 7
        }

## OData PLUs collection [/odata/Plus]

### Get all PLUs [GET]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (array[PLU model])

### Create PLU [POST]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

    + Attributes (PLU model)

+ Response 201

    + Attributes (PLU model)

## OData PLU [/odata/Plus('{id}')]

+ Parameters

    + id: 56e28558 - plu Id.
    
+ Attributes (PLU model)

### Get PLU [GET]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200

    + Attributes (PLU model)

+ Response 404

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update PLU [PUT]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

    + Attributes (PLU model)

+ Response 200

    + Attributes (PLU model)

### Delete PLU [DELETE]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200

    + Attributes (PLU model)

+ Response 404

        {
          "Message": "Resource not found.",
          "Code": 7
        }

# Group Roles

Role groups system-defined user roles to groups.
For example role "Sale" may group user roles such as `TicketUpdate`, `TicketClose`, `OrdersProcess` and so on.

## Roles collection [/api/roles/]

+ Attributes (Role model)

### Get all roles [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)
    
    + Attributes (array[Role model])

### Create role [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Role model)

+ Response 201 (application/json)

    + Attributes (Role model)

## Role [/api/roles/{id}]

+ Parameters

    + id: sale (string) - An unique name of the role.

### Get role [GET]

Gets role specified by its `Name`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Role model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update role [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Role model)

+ Response 200 (application/json)

    + Attributes (Role model)

### Delete role [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Role model)

## OData roles collection [/odata/Roles]

### Get all roles [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)
    
    + Attributes (array[Role model])

### Create role [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Role model)

+ Response 201 (application/json)

    + Attributes (Role model)

## OData role [/odata/Roles('{id}')]

+ Parameters

    + id: sale (string) - An unique name of the role.

### Get role [GET]

Gets role specified by its `Name`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Role model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update role [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Role model)

+ Response 200 (application/json)

    + Attributes (Role model)

### Delete role [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Role model)

# Group Stocks

Each PLU (merchandise) must belong to some stock - PLUs are grouped to stocks.
Each cash register usually sells only items from predefines stock.

## Stocks collection [/api/stocks/]

+ Attributes (Stock model)

### Get all stocks [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)
    
    + Attributes (array[Stock model])

### Create stock [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Stock model)

+ Response 201 (application/json)

    + Attributes (Stock model)

## Stock [/api/stocks/{id}]

+ Parameters

    + id: S01 (string) - An unique name of the stock.

### Get stock [GET]

Gets stock specified by its `Name`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Stock model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update stock [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Stock model)

+ Response 200 (application/json)

    + Attributes (Stock model)

### Delete stock [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Stock model)


## OData stocks collection [/odata/Stocks]

### Get all stocks [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)
    
    + Attributes (array[Stock model])

### Create stock [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Stock model)

+ Response 201 (application/json)

    + Attributes (Stock model)

## OData stock [/odata/Stocks('{id}')]

+ Parameters

    + id: S01 (string) - An unique name of the stock.

### Get stock [GET]

Gets stock specified by its `Name`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Stock model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update stock [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Stock model)

+ Response 200 (application/json)

    + Attributes (Stock model)

### Delete stock [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Stock model)

# Group Stock Takings

Stock takings provides way to perform stock quantity corrections on stock items.
Stock taking may be updated repeatedly, but after marking stock taking as closed (providing values for fiels `ClosedBy` and `ClosedAt`), stock taking became read-only and cannot be re-opened again.
Stock taking can only be closed after each items element has `ActualQuantity` provided.

After stock taking closure, new stock transfer (with type `correction` and subtype `stockTakingCorrection`) is created automatically by server, to pefrorm stock quantity corrections on these stock items.

## Stock takings collection [/api/stocktakings/]

+ Attributes (StockTaking)

### Get all stock takings [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)
    
    + Attributes (array[StockTaking])

### Create stock taking [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (StockTaking)

+ Response 201 (application/json)

    + Attributes (StockTaking)

## Stock taking [/api/stocktakings/{id}]

+ Parameters

    + id: a28da78k (string) - An unique Id of the stock taking.

### Get stock taking [GET]

Gets stock specified by its `Id`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (StockTaking)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update stock taking [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (StockTaking)

+ Response 200 (application/json)

    + Attributes (StockTaking)

### Delete stock taking [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (StockTaking)

## OData stock takings collection [/odata/StockTakings]

### Get all stock takings [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)
    
    + Attributes (array[StockTaking])

### Create stock taking [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (StockTaking)

+ Response 201 (application/json)

    + Attributes (StockTaking)

## OData stock taking [/odata/StockTakings('{id}')]

+ Parameters

    + id: a28da78k (string) - An unique Id of the stock taking.

### Get stock taking [GET]

Gets stock specified by its `Id`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (StockTaking)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update stock taking [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (StockTaking)

+ Response 200 (application/json)

    + Attributes (StockTaking)

### Delete stock taking [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (StockTaking)

# Group Stock Transfers

Stock transfers provides way to perform stock quantity changes on stock items.
Stock transfer may be updated repeatedly. Delta is calculated on server side, affecting stock quantity and stock value on relevant PLUs.

## Stock transfers collection [/api/stocktransfers/]

+ Attributes (StockTransfer)

### Get all stock transfers [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)
    
    + Attributes (array[StockTransfer])

### Create stock transfer [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (StockTransfer)

+ Response 201 (application/json)

    + Attributes (StockTransfer)

## Stock transfer [/api/stocktransfer/{id}]

+ Parameters

    + id: a28da78k (string) - An unique Id of the stock transfer.

### Get stock transfer [GET]

Gets stock specified by its `Id`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (StockTransfer)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update stock transfer [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (StockTransfer)

+ Response 200 (application/json)

    + Attributes (StockTransfer)

### Delete stock transfer [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (StockTransfer)

## OData stock transfers collection [/odata/StockTransfers]

### Get all stock transfers [GET]

+ Request

    + Headers

            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)
    
    + Attributes (array[StockTransfer])

### Create stock transfer [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (StockTransfer)

+ Response 201 (application/json)

    + Attributes (StockTransfer)

## OData stock transfer [/odata/StockTransfers('{id}')]

+ Parameters

    + id: a28da78k (string) - An unique Id of the stock transfer.

### Get stock transfer [GET]

Gets stock specified by its `Id`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (StockTransfer)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update stock transfer [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (StockTransfer)

+ Response 200 (application/json)

    + Attributes (StockTransfer)

### Delete stock transfer [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (StockTransfer)

# Group Tickets

Ticket represents cash register receipt.

## Tickets collection [/api/tickets/{?OnlyOpened,OnlyClosed,CloseDateFrom,CloseDateTo,DsrNumberFrom,DsrNumberTo,FiscalName,FiscalMemorySerialNumber,DeviceName,Employee,TicketNumberFrom,TicketNumberTo}]

+ Parameters

    + OnlyOpened: true (optional, boolean) - Result will contain only opened tickets, if set to true.
    + OnlyClosed: false (optional, boolean) - Result will contain only closed tickets, if set to true.
    + CloseDateFrom: `2016-06-13T10:25:00.000Z` (optional, string) - Result will contain only tickets closed after specified date (ISO8601 format), if this parameter is provided.
    + CloseDateTo: `2016-06-13T10:25:00.000Z` (optional, string) - Result will contain only tickets closed before specified date (ISO8601 format), if this parameter is provided.
    + DsrNumberFrom: 1 (optional, number) - Result will contain only tickets with daily sales report number greater or equal to this parameter, if this parameter is provided.
    + DsrNumberTo: 2 (optional, number) - Result will contain only tickets with daily sales report number smaller or equal to this parameter, if this parameter is provided.
    + FiscalName: FiscalPrinter1 (optional, string) - Result will contain only tickets closed in fiscal with specified fiscal name, if this parameter is provided.
    + FiscalMemorySerialNumber: FM20140001 (optional, string) - Result will contain only tickets closed in fiscal with fiscal memory with specified serial number, if this parameter is provided.
    + DeviceName: CashRegisterDevice1 (optional, string) - Result will contain only tickets closed in device with specified name, if this parameter is provided.
    + Employee: John123 (optional, string) - Result will contain only tickets created by employee with specified user name, if this parameter is provided
    + TicketNumberFrom: 1 (optional, number) - Result will contain only tickets with number greater or equal to this parameter, if this parameter is provided.
    + TicketNumberTo: 2 (optional, number) - Result will contain only tickets with number smaller or equal to this parameter, if this parameter is provided.

### Get tickets [GET]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200 (application/json)
    
    + Attributes (array[Ticket model])

### Create ticket [POST]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

    + Attributes (Ticket model)

+ Response 201

    + Attributes (Ticket model)

## Ticket [/api/ticket/{id}]

#### Ticket restrictions

* When creating ticket, `Employee` must correspond with user that is currently loged in.
* When creating ticket, `OriginDeviceName` must have value equal to name of device, which user is currently logged on. 

##### Ticket payment restrictions

* `PaymentType` corresponds with existing active payment type
* Currency label of each payments amount must match `Ticket.CurrencyLabel`.

+ Parameters

    + id: 56e28558 (required, string) - Unique PLU Id

+ Attributes (Ticket model)

### Get ticket [GET]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200

    + Attributes (Ticket model)

### Create or update ticket [PUT]

Only *opened* tickets can be updated.

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

    + Attributes (Ticket model)

+ Response 200

    + Attributes (Ticket model)

### Delete ticket [DELETE]

Only *opened* tickets can be deleted.

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200

    + Attributes (Ticket model)


## Batch ticket processing [/api/tickets/{?action}]

+ Parameters

    + action: Default (enum[Default, Move], optional) - Specify
    whether request should be interpreted as a regular batch
    create/update or synchronization after moving ticket item(s).

### Create or update tickets [PATCH]

Allows batch create/update operation on the set of tickets and supports
tickets sychronization  after ticket splitting operation.

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

    + Attributes (array[Ticket model])

+ Response 200 (application/json)
    
    + Attributes (array[Ticket model])

## Ticket closing [/api/ticket/{id}/close]

Ticket closing represents process, when ticket is 
printed on fiscal printer. After printing ticket 
on fiscal printer, ticket `CloseInfo` property has value, 
(provided by server) therefore is marked as ***Closed*** 
and is in *read-only* state - therefore any attempt to 
update the closed ticket will fail.

To perform ticket closure, total sum of ticket must be equal
to sum of all ticket payents. 
Until ticket closing, ticket does not have to contain any payment
in payments collection.

+ Parameters

    + id: 56e28558 (required, string) - Unique PLU Id

### Close ticket [POST]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json
        
    + Attributes (TicketCloseContext)

+ Response 200

    + Attributes (Ticket model)

## Preliminary ticket priting [/api/ticket/{id}/print_preliminary_ticket]

Printing ticket as nonfiscal record on specified order endpoint.
Preliminary ticket may be printed on ticket marked as opened or closed with unlimited repetition.

## Print preliminary ticket [POST]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json
        
    + Attributes (PrintPreliminaryTicketContext)

+ Response 200

    + Attributes (Ticket model)


## OData tickets collection [/odata/Tickets]

### Get tickets [GET]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200 (application/json)
    
    + Attributes (array[Ticket model])

### Create ticket [POST]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

    + Attributes (Ticket model)

+ Response 201

    + Attributes (Ticket model)

## OData ticket [/odata/Tickets('{id}')]

+ Parameters

    + id: 56e28558 (required, string) - Unique PLU Id

### Get ticket [GET]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200

    + Attributes (Ticket model)

### Create or update ticket [PUT]

Only *opened* tickets can be updated.

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

    + Attributes (Ticket model)

+ Response 200

    + Attributes (Ticket model)

### Delete ticket [DELETE]

Only *opened* tickets can be deleted.

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200

    + Attributes (Ticket model)


## OData batch ticket processing [/odata/Tickets/TicketService.Update]

### Create or update tickets [POST]

Allows batch create/update operation on the set of tickets and supports
tickets sychronization after ticket splitting operation.

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

    + Attributes (TicketBatchUpdateContextOData)

+ Response 200 (application/json)
    
    + Attributes (array[Ticket model])


## OData ticket closing [/odata/Tickets('{id}')/TicketService.Close]

Ticket closing represents process, when ticket is 
printed on fiscal printer. After printing ticket 
on fiscal printer, ticket `CloseInfo` property has value, 
(provided by server) therefore is marked as ***Closed*** 
and is in *read-only* state - therefore any attempt to 
update the closed ticket will fail.

To perform ticket closure, total sum of ticket must be equal
to sum of all ticket payents. 
Until ticket closing, ticket does not have to contain any payment
in payments collection.

+ Parameters

    + id: 56e28558 (required, string) - Unique PLU Id

### Close ticket [POST]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json
        
    + Attributes (TicketCloseContextOData)

+ Response 200

    + Attributes (Ticket model)

## OData preliminary ticket priting [/odata/Tickets('{id}')/TicketService.PrintPreliminaryTicket]

Printing ticket as nonfiscal record on specified order endpoint.
Preliminary ticket may be printed on ticket marked as opened or closed with unlimited repetition.

### Print preliminary ticket [POST]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json
        
    + Attributes (PrintPreliminaryTicketContextOData)

+ Response 200

    + Attributes (Ticket model)


# Group Users

## Users collection [/api/users/]

Please note: When querying Users, `User` object is returned. During create or update, `UserCreateUpdateContext` is used as a payload, but `User` object is returned as a response.

`User` object is provided as an example above.

+ Attributes (UserDTO)

### Get all users [GET]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (array[UserDTO])

### Create user [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (UserCreateUpdateContext)

+ Response 201 (application/json)

    + Attributes (UserDTO)

## User [/api/user/{id}/]

+ Parameters

    + id: John123 (name) - unique user name (login).

### Get user [GET]

Gets user specified by its `UserName`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (UserDTO)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update user [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (UserCreateUpdateContext)

+ Response 200 (application/json)

    + Attributes (UserDTO)

### Delete user [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (UserDTO)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }


## OData users collection [/odata/Users]

### Get all users [GET]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (array[UserDTO])

### Create user [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (UserCreateUpdateContext)

+ Response 201 (application/json)

    + Attributes (UserDTO)

## OData user [/odata/Users('{id}')]

+ Parameters

    + id: John123 (name) - unique user name (login).

### Get user [GET]

Gets user specified by its `UserName`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (UserDTO)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update user [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (UserCreateUpdateContext)

+ Response 200 (application/json)

    + Attributes (UserDTO)

### Delete user [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (UserDTO)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

# Group VAT categories

VAT category pairs VAT category Id with actual VAT rate.

## VAT categories collection [/api/vats/]

+ Attributes (VAT model)
    
### Get VAT categories [GET]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (array[VAT model])
    
### Create VAT category [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (VAT model)

+ Response 201 (application/json)

    + Attributes (VAT model)

## VAT category [/api/vats/{id}]

+ Parameters

    + id: 1 (number) - unique VAT nubmer.

### Get VAT category [GET]

Gets vat specified by its `number`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (VAT model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update VAT category [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (VAT model)

+ Response 200 (application/json)

    + Attributes (VAT model)

### Delete VAT category [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (VAT model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }


## OData VAT categories collection [/odata/Vats]

### Get VAT categories [GET]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (array[VAT model])
    
### Create VAT category [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (VAT model)

+ Response 201 (application/json)

    + Attributes (VAT model)

## OData VAT category [/odata/Vats('{id}')]

+ Parameters

    + id: 1 (number) - unique VAT nubmer.

### Get VAT category [GET]

Gets vat specified by its `number`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (VAT model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update VAT category [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (VAT model)

+ Response 200 (application/json)

    + Attributes (VAT model)

### Delete VAT category [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (VAT model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

# Group Zones

Zones, may be refered also as *rooms*, are areas where zone items (such as tables) are defined. 
Zone items represents floor plan.

Ticket may refer to specific zone and table via its `Location` poperty.

## Zones collection [/api/zones/]

+ Attributes (Zone model)
    
### Get all zones [GET]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Zone model)
    
### Create zone [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Zone model)

+ Response 201 (application/json)

    + Attributes (Zone model)

## Zone [/api/zones/{id}]

+ Parameters

    + id: Terrace (string) - unique zone name.

### Get zone [GET]

Gets zone specified by its unique `Name`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Zone model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update zone [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Zone model)

+ Response 200 (application/json)

    + Attributes (Zone model)

### Delete zone [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Zone model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }


## OData zones collection [/odata/Zones]

### Get all zones [GET]

+ Request

    + Headers

            Content-Type: application/json; charset=utf-8
            X-Access-Token: {{TokenId}}
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Zone model)
    
### Create zone [POST]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Zone model)

+ Response 201 (application/json)

    + Attributes (Zone model)

## OData zone [/odata/Zones('{id}')]

+ Parameters

    + id: Terrace (string) - unique zone name.

### Get zone [GET]

Gets zone specified by its unique `Name`.

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Zone model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

### Create or update zone [PUT]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

    + Attributes (Zone model)

+ Response 200 (application/json)

    + Attributes (Zone model)

### Delete zone [DELETE]

+ Request

    + Header
    
            X-Access-Token: {{TokenId}}
            Content-Type: application/json; charset=utf-8
            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Zone model)

+ Response 404 (application/json)

        {
          "Message": "Resource not found.",
          "Code": 7
        }

# Data Structures

## Address (object)

+ Street: 123 Main St. (optional, string) - 
+ City: Bratislava (optional, string) - 
+ ZipCode: 841 05 (optional, string) - 
+ Country: Slovakia  (optional, string) - 

## Article category (object)

+ Color: `#cccccc` (string) - Optional RGB representation of article category color.
+ Description: Pizza (required, string) - full article category name
+ Label: PIZ (required, string) - up to 3 characters long unique article category label

## Authorization result (object)

+ TokenId: eyJ0eXAiOiJK.. (required, string) - Token Id, which is necessary to provide in header of all request that requires user authorization.
+ User (required, User profile) - User profile that consists of informations about user itself and settings of device that user is logged on. Based on device type, fields "Settings" and "Preferences" may contains various fields.

## ApiKey (object)

+ Id: b0e78d72d5 (required, string) - unique Id
+ ClientId: 6565cac0383 (required, string) - Public API key.
+ ClientSecret: 2de9d6952028 - API secret key, used to hash request payload.
+ IsActive: true (required, boolean) - Determines whether this key can be used to access API
+ CreatedAt: `2016-03-17T15:49:32.473Z` (required, string) - Date and time of API key creation (ISO8601 format).
+ Name: `Eshop connection` (required, string) - Something users will recognize and trust
+ Description: `Eshop connection` (required, string) - This is displayed to all potential users of your application
+ CallbackUrl: `http://connection.com/` (required, string) - URL users will be redirected to after access authorization
+ HomepageUrl: `http://connection.com/home` (string) - Optional URL where users can learn more about application.
+ UserName: `John123` (required, string) - user name of employee that will be loged in, using this API key.
+ DeviceName: `CashRegister1` (required, string) - name of device on which user will operate, using this API key.
+ Permissions (required, array[string]) - collection of user roles

## ApiKeyCreateContext (object)

+ IsActive: true (required, boolean) - Determines whether this key can be used to access API
+ Name: `Eshop connection` (required, string) - Something users will recognize and trust
+ Description: `Eshop connection` (required, string) - This is displayed to all potential users of your application
+ CallbackUrl: `http://connection.com/` (required, string) - URL users will be redirected to after access authorization
+ HomepageUrl: `http://connection.com/home` (string) - Optional URL where users can learn more about application.
+ UserName: `John123` (required, string) - user name of employee that will be loged in, using this API key.
+ DeviceName: `CashRegister1` (required, string) - name of device on which user will operate, using this API key.
+ Permissions (required, array[string]) - collection of user roles

## BankAccount (object)

+ BankCountry: `SK` (required, string) - Bank country
+ BankName: `Tatra Banka, a.s.` (required, string) - Name of bank
+ IBAN: `SK3011000000002616012345` (required, string) - Bank account number in IBAN format
+ Number: `1100223344/1100` (required, string) - Bank account number in old format
+ SWIFT: `TATRSKBX` (required, string) - Bank SWIFT code

## Cash register settings

+ MaxQuantity: 50 (required, number) - Defines maximal quantity per ticket item.
+ OpenedPrices: true (required, boolean) - Specifies whether unit prices can be changed on items with non-fixed price.
+ NoticeOnNegativeSale: false (required, boolean) - 
+ SecretCustomersCardId: false (required, boolean) - 
+ SecretEmployeesId: false (required, boolean) - 
+ VisibleQuantities: false (required, boolean) - 
+ CustomerMode: false (required, boolean) - 
+ DefaultFiscalName: Virtual (optional, string) - 
+ DefaultPrinterName: Bar (optional, string) - 
+ DefaultStockName: Stock01 (optional, string) - 

## CashTransfer (object)

+ Amount (required, Money) - Cash transfer operation amount. Positive for deposit or negative for withdrawal
+ Date: `2016-03-17T15:49:32.473Z` (required, string) - Date and time of cash transfer operation (ISO8601 format)
+ Employee (required, UserInfo) - inrofmraitons about employee who performed cash transfer.

## CashTransferOData (object)

+ CashTransfer (required, CashTransfer) - Cash transfer context

## Company model (object)

+ Id: `56e28558` (required, string) - Unique company Id
+ Name: `TESCO inc.` (required, string) - Company name
+ Address (required, Address) - Company address informations
+ ShippingAddress (optional, Address) - Company shipping address informations
+ Contact (required, Contact) - Company contant informations
+ BankAccount (required, BankAccount) - Informations about company bank account and bank itself
+ CRN: `12345678` (required, string) - Company registration number (known as IČO, in Slovak Republic)
+ VatId: `SK1020304050` (required, string) - Vat ID (known as IČ DPH, in Slovak Republic)
+ TaxId: `1020305060` (required, string) - Tax ID (known as DIČ, in Slovak Republic)
+ TaxPayer: true (required, boolean) - Defines whether company is tax payer
+ Register: `reg v OR OS Bratislava I, vl.č. 12345/B` (required, string) - Optional company registration informations
+ DueDays: 30 (required, number) - Number of days for invoice payment period
+ Type: Supplier (required, string) - Company type, one of following values: Unknown, Supplier, Purchaser
+ IsActive: true (required, boolean) - Determines whether this company is active and new stock transfers can be added
+ IsDefault: false (required, boolean) - Determines whether this company represents owner of cash register

## Contact (object)

+ Fax: 02 123 456 (optional, string) - 
+ Phone: 02 123 456 (optional, string) - 
+ Mobile: +421 903 123 456 (optional, string) - 
+ Email: adam.smith@mail.com (optional, string) - 

## Coordinates (object)

+ X: 0 (required, number) - X-axis coordinate
+ Y: 1 (required, number) - Y-axis coordinate

## Credentials (object)

+ UserName: John123 (required, string) - User login
+ Password: thisIsMyPassword1 (optional, string) - User password
+ DeviceName: CashRegister1 (required, string) - Name of device, on which user will operate on.

## Currency model (object)

+ IsDomestic: `true` (required, boolean) - Determines whether this currency is marked as domestic 
+ Label: `EUR` (required, string) - Unique (3 characters long) currency label
+ Sign: `€` (optional, string) - Optional currency (1 character long) symbol
+ ExchangeRate: 1 (required, number) - Exchange rate between domestic and foreign currency. Value is equal to 1 for domestic currency.
+ Description: `Euro` (required, string) - Full currency name

## Customer model (object)

+ Address (required, Address) - Customer address informations
+ CardId: `1293080430` (required, string) - Unique card Id
+ Contact (required, Contact) - Customer contant informations
+ Credit (required, Money) - financial representation of customers credit
+ CreditRate: 0 (required, number) - amount of money, which will be transfered to customer credit, after one currency unit. For example: if credit rate is 0.05, from every 1 EUR, 0.05 EUR is transfered to customer credit.
+ CRN: `12345678` (optional, string) - company registration number
+ DiscountRate: 50 (required, number) - Discount rate percentage, with value between 0 and 100, with precision up to two decimal places
+ ExpirationDate: `2016-06-13T10:25:00.000Z` (optional, string) - The date/time (ISO8601 format) after which customer account is expired
+ IsActive: true (required, boolean) - marks whether customer account is active and can be used in tickets
+ Name: Mr. Adam Smiths (required, string) - name of customer account, printed on receipt
+ VatId: `SK1020304050` (optional, string) - company VAT Id (known as IČ DPH, in Slovak Republic) 
+ TaxId: `1020304050` (optional, string) - company TAX Id (known as DIČ, in Slovak Republic)

## CustomerInfo (object)

+ Address (required, Address) - Customer address informations
+ CardId: 1293080430 (required, string) - id of customer card
+ Contact (required, Contact) - Customer contant informations
+ CRN: `12345678` (optional, string) - company registration number
+ Name: Mr. Adam Smiths (required, string) - name of customer card holder
+ VatId: `SK1020304050` (optional, string) - company VAT Id (known as IČ DPH, in Slovak Republic) 
+ TaxId: `1020304050` (optional, string) - company TAX Id (known as DIČ, in Slovak Republic)

## DailySalesReport model (object)

+ Id: 56e28558 (required, string) - unique daily sales report identifier
+ FiscalName: `fiscalPrinter` (required, string) - name of fiscal printer, to which this daily sales report belong
+ Number: 123 (required, number) - daily sales report number provided by fiscal printer
+ FiscalMemorySerialNumber: `FM20160001` (required, string) - fiscal memory serial number, to which this daily sales report is registered
+ OpenDate: `2016-03-17T15:49:32.473Z` (required, string) - Date and time of daily sales report creation (ISO8601 format)
+ CurrencyLabel: EUR (required, string) - label of currency, in which all money informations is stored for this daily sales report
+ CashTransfers (required, array[CashTransfer]) - collection of cash transfers
+ FiscalInfo (optional, DailySalesReportFiscalInfo) - Information determined during fiscal daily sales report closing procedure. If this field has null value, daily sales report is considered as opened.

## DailySalesReportCopyContext (object)

+ DailySalesReportNumber: 1 (optional, number) - Number of daily sales report
+ DailySalesReportDate: `2016-03-17T15:49:32.473Z` (optional, string) - Date and time of daily sales report closure

## DailySalesReportCopyContextOData (object)

+ Context (required, DailySalesReportCopyContext) - Daily sales report copy context.

## DailySalesReportFiscalInfo (object)

+ TicketsCount: 512 (required, number) - Number of tickets closed in this daily sales report. This value is provided by fiscal device and it is not determined by number of records in database.
+ StornoAmount (required, Money) - amount of all storned ticket items
+ StornoCount: 0 (required, number) - number of storned ticket items
+ DiscountAmount (required, Money) - amount of all discounted ticket items
+ DiscountCount: 0 (required, number) - number of discounted ticket items
+ NegativeAmount (required, Money) - amount of all negative ticket items
+ NegativeCount: 0 (required, number) - number of negative ticket items
+ ReturnAmount (required, Money) - amount of all returned ticket items
+ ReturnCount: 0 (required, number) - number of returned ticket items
+ InvalidAmount (required, Money) - amount of all invalid ticket items
+ InvalidCount: 0 (required, number) - number of invalid ticket items
+ RoundingUp (required, Money) - providers total amount of all positive roundings
+ RoundingDown (required, Money) - providers total amount of all negative roundings
+ CloseDate: `2016-03-17T23:49:32.473Z` (required, string) - Date and time of daily sales report closure (ISO8601 format)
+ VatIncomes (required, array[VatIncome]) - collection that stores incomes by each VAT category
+ GrandTotal (required, Money) - providers grand total amount for this daily sales report

## Device model (object)

+ IsActive: true (required, boolean) - Determines whether this device can be used
+ Name: `CashRegister1` (required, string) - Unique device name
+ EnvName: `CashRegister` - Environment name (one of following: BackOffice, CashRegister, PDA, Tool)
+ Description: `Cash register 1` (required, string) - Detailed description of device
+ Preferences (required, object) - Holds preferences, that are default for specific device and used by client. They can be overriden by user.
+ Roles (required, array[string]) - Default set of roles associated with this device. This does not affect any user.
+ Settings (required, object) - Contains informations about device settings, represented by Dictionary of string-string pairs. Content may vary based on environment name.

## DeviceOData (object)

+ IsActive: true (required, boolean) - Determines whether this device can be used
+ Name: `CashRegister1` (required, string) - Unique device name
+ EnvName: `CashRegister` - Environment name (one of following: BackOffice, CashRegister, PDA, Tool)
+ Description: `Cash register 1` (required, string) - Detailed description of device
+ Preferences (required, object) - Holds preferences, that are default for specific device and used by client. They can be overriden by user.
+ Roles (required, array[string]) - Default set of roles associated with this device. This does not affect any user.
+ Settings (required, array[KeyValuePair]) - Contains informations about device settings, represented by collection of key-value elements. Content may vary based on environment name.

## Fiscal model (object)

+ IsActive: true (required, boolean) - Determines whether fisca device is active and can process ticket closure operations
+ Name: `Fiscal1` (required, string) - Unique name of fiscal device
+ Type: `Sirk` (required, string) - Defines fiscal device model (and manufacturer)
+ DKP: `1001020304050001` (required, string) - Fiscal device unique code
+ Version: `1` (required, string) - Defines fiscal device (firmware) version
+ Settings (required, object) - string-string dictionary of fiscal settings. Content may vary based on fiscal type.

## FiscalOData (object)

+ IsActive: true (required, boolean) - Determines whether fisca device is active and can process ticket closure operations
+ Name: `Fiscal1` (required, string) - Unique name of fiscal device
+ Type: `Sirk` (required, string) - Defines fiscal device model (and manufacturer)
+ DKP: `1001020304050001` (required, string) - Fiscal device unique code
+ Version: `1` (required, string) - Defines fiscal device (firmware) version
+ Settings (required, array[KeyValuePair]) - collection of key-value elements. Content may vary based on fiscal type.

## IntervalSalesReportContext (object)

+ DsrDateFrom: `2016-03-17T15:49:32.473Z` (optional, string) - Close date of first daily sales report in selected interval (ISO8601 format)
+ DsrDateTo: `2016-03-17T15:49:32.473Z` (optional, string) - Close date of last daily sales report in selected interval (ISO8601 format)
+ DsrNumberFrom: 1 (optional, number) - Number of first daily sales report in selected interval
+ DsrNumberTo: 30 (optional, number) - Number of last daily sales report in selected interval

## IntervalSalesReportContextOData (object)

+ Context (required, IntervalSalesReportContext) - Interval sales report context

## KeyValuePair

+ Key: `KeyName` (required, string) - Name of key
+ Value: `Value` (required, string) - String value

## Licence model (object)

+ CertificateId: `416000` (required, number) - Unique ID for each API server.
+ ActivationDate: `2016-03-17T15:49:32.473Z` (required, string) - Date and time of licence creation (ISO8601 format)
+ ExpirationDate: `2016-03-17T15:49:32.473Z` (required, string) - Date and time of licence expiration (ISO8601 format)
+ DKPs (required, array[string]) - Collection of fiscal DKPs that can be operated on this API 
+ Modules (required, array[string]) - Collection of API modules
+ MaxDevicesCount: 10 (required, number) - Maximal count of concurrently connected sessions.
+ RemainingDays: 14 (required, number) - Number of days left to licence expiration 
+ IsExpired: false (required, boolean) - Determines whether licence is already expired

## Money (object)

+ Amount: 1.99 (required, number) - Amount rounded to two decimals 
+ CurrencyLabel: EUR (required, string) - Currency label that contains 3 characters

## MoneyInfo (object)

+ CurrencyLabel: EUR (required, string) - Label of actual currency used in payment
+ DomesticCurrencyLabel: EUR (required, string) - Label of domestic currency
+ ExchangeRate: 1 (required, number) - Exchange rate between domestic and foreign currency. Up to 4 decimal places.
+ Amount: 2.9 (required, number) - Actual payment amount.

## NonfiscalRecordContext (object)

+ RecordBody: `Test of fiscal printer` (required, string) - Body of nonfiscal record.

## NonfiscalRecordContextOData (object)

+ Context (required, NonfiscalRecordContext) - Nonfiscal record context.

## OrderEndpoint (object)

+ IsActive: true (required, boolean) - marks whether order endpoint is active and will be user while orders processing
+ Name: `KitchenPrinter` (required, string) - Unique name of order endpoint
+ Address: `\\192.168.1.10\Kitchen` (required, string) - Network address of order endpoint
+ Type: `SRP350` (required, string) - Manufacturer and/or model of order endpoint 
+ Settings (required, object) - dictionary of order endpoint settings such as 'PrintDoubleHeight', 'PrintDoubleWidth', ...

## OrderEndpointOData (object)

+ IsActive: true (required, boolean) - marks whether order endpoint is active and will be user while orders processing
+ Name: `KitchenPrinter` (required, string) - Unique name of order endpoint
+ Address: `\\192.168.1.10\Kitchen` (required, string) - Network address of order endpoint
+ Type: `SRP350` (required, string) - Manufacturer and/or model of order endpoint 
+ Settings (required, array[KeyValuePair]) - Collection of key-value elements.

## Order model (object)

+ DeviceName: CashRegister1 (required, string) - Name of device from which ticket update was performed, and therefore order was created.
+ Id: 56e28558 (required, string) - unique order identifier
+ Items (required, array[OrderItem]) - collection of order items
+ Number: 123 (required, number) - human readable order sequence number. Note that this number is not unique.
+ TicketInfo (required, OrderTicketInfo) - Informations about relevant ticket
+ UserInfo (required, UserInfo) - inrofmraitons about employee who performed ticket update - from which order was created.

## OrderItem (object)

+ Comment: `With extra cheese` (optional, string) - optional comment that will be delivered to order endpoint
+ Endpoints (required, array[OrderItemEndpoint]) - collection of endpoint contexts, one for each order endpoint on which current item will be delivered to 
+ Id: 1 (required, number) - order item numeric identificator, that is unique within order
+ Plu (required, OrderItemPlu) - informations about product
+ Quantity (required, Quantity) - ordered product quantity

## OrderTicketInfo (object)

+ Id: 56e285123 (required, string) - unique ticket id
+ Location (optional, TicketLocation) - ticket location
+ Name: Bar1 (required, string) - Name of ticket (at time of order creation)

## OrderItemEndpoint (object)

+ Name: KitchenPrinter (required, string) - order endpoint name
+ StatusChanges (required, array[OrderItemEndpointStatusChange]) - collection of order processing status changes from endpoint on this order item

## OrderItemPlu (object)

+ Code: 123 (required, number) - product code
+ Name: Pizza Hawaii (required, string) - product name
+ StockName: Stock01 (required, string) - name of stock in which product is registered

## OrderItemEndpointStatusChange (object)

+ Date: `2016-03-17T15:49:32.473Z` (required, string) - Date and time of status change (ISO8601 format)
+ Status: 1 (required, number) - Order status value

## OrderStatusContext (object)

+ Status: 1 (required, number) - Order status value

## OrderStatusContextOData (object)

+ Context (required, OrderStatusContextODataPayload) - Order status context

## OrderStatusContextODataPayload

+ Status: 1 (required, string) - Order status value, that contains string representation of status or its number ("1" or "Created").

## OrderItemStatusContextOData (object)

+ Context (required, OrderItemStatusContextODataPayload) - Order item status context

## OrderItemStatusContextODataPayload (object)

+ OrderItemId: 1 (required, number) - Numeric order item identifier
+ Status: 1 (required, string) - Order status value, that contains string representation of status or its number ("1" or "Created").

## OrderEndpointStatusContextOData (object)

+ Context (required, OrderEndpointStatusContextODataPayload) - Order endpoint status context

## OrderEndpointStatusContextODataPayload (object)

+ OrderEndpointName: Kitchen (required, string) - Name of order endpoint
+ Status: 1 (required, string) - Order status value, that contains string representation of status or its number ("1" or "Created").

## ProcessOrdersQuery (object)

+ TicketIds (optional, array[string]) - All processable orders relevant to specified tickets will be processed.

## ProcessOrdersQueryOData (object)

+ Query (required, ProcessOrdersQuery) - Process orders query

## Payment type (object)

+ Category: OtherPaymentType (required, string) - Only one payment type is marked as default default cash payment type (category is equal to "CashPaymentType"), and default credit card payment type (category is euqal to "CreditCardPaymentType"). All other payment types have category value equal to "OtherPaymentType".
+ Number: 2 (required, number) - unique identifier (in range from 1 to 10). 
+ IsActive: true (required, boolean) - describes whether this payment can be used during ticket closing.
+ Description: Credit card (required, string) - payment description visible on ticket
+ IsChangeable: true (required, boolean) - describes whether customer can obtain cash refund, if amount paid by this payment type is higher than total ticket amount.

## PLU model (object)

+ Id: 56e28558 (required, string) - Unique PLU Id
+ StockName: Stock01 (required, string) - Name of stock
+ OrderEndpointNames: ["PrinterPizza", "PrinterKitchen"] (required, array[string]) - collection of order endpoints, on which orders for this product will be prnted/processed.
+ ArticleCategoryLabel: PIZ (required, string) - 3 characters long label of article category
+ VatCategory: 1 (required, number) - VAT category Id
+ Name: Pizza Hawaii (required, string) - PLU name shown in system and printed on receipt, if description is not provided
+ Description: Pizza Hawaii 500g (optional, string) - Optional PLU description. If provided, description is printed on receipt instead of name. 
+ Code: 101 (required, number) - Lookup code. Each PLU can be identified uniquely by code and stock name. Note: 32 bit integer is used to store this value.
+ Codes: [] (required, array[string]) - Collection of string codes, serves as "aliases" for numeric code.
+ RetailPrice (required, Money) - Product retail price with VAT, that is paid by customer.
+ StockQuantity (optional, Quantity) - Stock quantity. Available only in PLUs with "stock item" type.
+ StockValue (optional, Money) - Product stock value. Available only in PLUs with "stock item" type.
+ IsSplittable: true (required, boolean) - Specifies whether this PLU can only be sold in integer quantities.
+ IsDiscountAllowed: true (required, boolean) - Specifies whether discount can be placed on ticket item that represents this PLU.
+ IsPriceFixed: true (required, boolean) - Specifies whether this PLU can only be sold with provided retail price.
+ IsActive: true (required, boolean) - Specifies whether this PLU is active and can be used in ticket during sale.
+ Type: StockItem (required, string) - Specifies type of PLU. See PLU section for possible PLU type values.
+ Receipt (required, array[PluReceiptItem]) - Contains collection of receipt items. Available only in PLUs with "receipt" type.
+ Unit: pcs (required, string) - 3 characters long product measurement unit
+ MinStockQuantity (optional, Quantity) - Minimal stock quantity. Available only in PLUs with "stock item" type.
+ PriceHistory (required, array[PLU price history item]) - Array containing information about each retail price change.
+ Color: `#fff` (optional, string) - Optional RGB representation of PLU color, visible in applications for cashiers.

## PLU price history item (object)

+ Date: `2016-06-13T10:25:00.000Z` (required, string) - The date/time (ISO8601 format) of price change
+ RetailPrice (required, Money) - new retail price

## PluReceiptItem (object)

+ PluCode: 213 (required, number) - PLU code
+ PluStockname: Stock01 (required, string) - PLU stock name
+ Quantity (required, Quantity) - quantity

## RecordCopyContext (object)

+ DailySalesReportNumber: 1 (optional, number) - Number of daily sales report
+ DailySalesReportDate: `2016-03-17T15:49:32.473Z` (optional, string) - Date and time of daily sales report closure
+ TicketNumber: 1 (required, number) - Number of ticket

## RecordCopyContextOData (object)

+ Context (required, RecordCopyContext) - Record copy context

## Role model (object)

+ Name: `sale` (required, string) - unique role name
+ Label: `Sale` (required, string) - role label to display to user
+ Description: `User with sale role is allowed to perform sale-related operations on cash register.` (optional, string) - optional detailed description
+ Rights (required, array[string]) - array of user roles

## Quantity (object)

+ Amount: 1.123 (required, number) - quantity amount
+ Unit: ks (required, string) - up to 3 characters long string describing unit of quantity

## Stock model (object)

+ Name: `Bar` (required, string) - unique stock name
+ Description: `Barmans stock` (optional, string) - detailed description of stock

## StockTaking (object)

+ Id: 56e28558 (optional, string) - Unique stock taking identifier
+ CreatedAt: `2016-03-17T15:49:32.473Z` (required, string) - Date and time of stock taking creation (ISO8601 format).
+ ClosedAt: `2016-03-17T15:49:32.473Z` (optional, string) - Date and time of stock taking closure (ISO8601 format).
+ CreatedBy (required, UserInfo) - informations about employee that creates this stock taking.
+ ClosedBy (optional, UserInfo) - informations about employee that closes this stock taking.
+ Items (required, array[StockTakingItem]) - collection of PLUs with type stock item.

## StockTakingItem (object)

+ ExpectedQuantity (required, Quantity) - Quantity expected by system, based on stock transfers.
+ ActualQuantity (optional, Quantity) - Quantity actualy found by user, based on physical calculations. This value must be provided to perform stock taking closure.
+ PLU (required, StockTakingItemPluInfo) - Informations about PLU

## StockTakingItemPluInfo (object)

+ Name: Milk (required, string) - PLU name.
+ Code: 101 (required, number) - PLU code.
+ StockName: Stock01 (required, string) - PLU stock name.
+ ArticleCategoryLabel: PIZ (required, string) - 3 characters long label of article category
+ VatInfo (required, VAT model) - informations about VAT category and VAT rate, based on VatCategory of PLU.
+ RetailPrice (required, Money) - PLU retail price.
+ PurchasePrice (required, Money) - PLU average purchase price, calculated by division of PLU's stock value and stock quantity.

## StockTransfer (object)

+ Id: 56e28558 (optional, string) - Unique stock transfer identifier
+ CreatedAt: `2016-03-17T15:49:32.473Z` (required, string) - Date and time of stock transfer creation (ISO8601 format).
+ ClosedAt: `2016-03-17T15:49:32.473Z` (optional, string) - Date and time of stock transfer closure (ISO8601 format).
+ CreatedBy (required, UserInfo) - informations about employee that creates this stock transfer.
+ ClosedBy (optional, UserInfo) - informations about employee that closes this stock transfer.
+ Category: 1 (required, number) - category with following values: 0 = unknown, 1 = income, 2 - outcome, 3 - transfer, 4 - correction
+ SubCategory: 1 (required, number) - sub category with following values: 0 = unknown, 1 = sale, 2 = invoice, 3 = stock taking correction
+ Partner (optional, StockTransferCompanyInfo) - Informations about business partner (purchaser or supplier)
+ Company (required, StockTransferCompanyInfo) - Informations about system owner company
+ DueDate: `2016-03-17T15:49:32.473Z` (optional, string) - Optional date and time of stock transfer payment date (ISO8601 format).
+ DocumentNumber: 123 (optional, number) - Document number provided by server side
+ DocumentDate: `2016-03-17T15:49:32.473Z` (required, string) - Date and time of stock transfer evidence, which may be different from actual system date and time (ISO8601 format).
+ VariableSymbol: `20160123` (optional, string) - stock transfer variable symbol
+ ConstantSymbol: `0308` (optional, string) - stock transfer constant symbol
+ SpecificSymbol: `123456` (optional, string) - stock transfer specific symbol
+ Note: `This is a note.` (optional, string) - Optional string note
+ DeliveryType (required, number) - Delivery type with following values: 0 = unknown, 1 = none, 2 = cartage, 3 = post office, 4 = courier
+ PaymentInfo (optional, StockTransferPaymentInfo) - Payment informations related to this stock transfer
+ Items (required, array[StockTransferItem]) - collection of PLUs with type stock item.
+ Meta (optional, object) - string-string dictionary used as a storage for meta iformations related to this stock transfer.

## StockTransferCompanyInfo (object)

+ Name: `TESCO inc.` (required, string) - Company name
+ CRN: `12345678` (required, string) - Company registration number (known as IČO, in Slovak Republic)
+ VatId: `SK1020304050` (required, string) - Vat ID (known as IČ DPH, in Slovak Republic)
+ TaxId: `1020305060` (required, string) - Tax ID (known as DIČ, in Slovak Republic)
+ TaxPayer: true (required, boolean) - Defines whether company is tax payer
+ Register: `reg v OR OS Bratislava I, vl.č. 12345/B` (required, string) - Optional company registration informations
+ Contact (required, Contact) - Company contant informations
+ Address (required, Address) - Company address informations
+ ShippingAddress (optional, Address) - Company shipping address informations
+ BankAccount (required, BankAccount) - Informations about company bank account and bank itself

## StockTransferPaymentInfo (object)

+ PaymentType: 0 (required, number) - Payment method type with following values: 0 = unknown, 1 = cash, 2 = bank transfer, 3 = POS terminal, 4 = money order, 5 = cash on delivery, 6 = coupon, 7 = other
+ IsPaid: true (required, boolean) - 
+ PaidAt: `2016-03-17T15:49:32.473Z` (optional, string) - Date and time of stock transfer payment evidence (ISO8601 format).

## StockTransferItem (object)

+ Id: 1 (optional, number) - Unique item Id (unique within stock transfer). Value is provided by server.
+ SourcePLU (optional, StockTransferItemPlu) - Informations about product that is being transfered from stock
+ DestinationPLU (optional, StockTransferItemPlu) - Informations about product that is being transfered to stock
+ Note: `This is a note.` (optional, string) - Optional string note

## StockTransferItemPlu

+ Name: Milk (required, string) - PLU name
+ Code: 101 (required, number) - Lookup code. Each PLU can be identified uniquely by code and stock name. Note: 32 bit integer is used to store this value.
+ StockName: Stock01 (required, string) - Name of stock
+ PurchasePrice (optional, Money) - Product purchase price, including VAT. Required for PLUs with type `StockItem`. Optional otherwise.
+ RetailPrice (required, Money) - Product retail price including VAT.
+ VatInfo (required, VAT model) - Informations about VAT category and VAT rate.
+ Quantity (required, Quantity) - Contains positive or negative non-zero quantity.
+ DiscountRate: 50 (required, number) - indicates item discount rate, with value between 0 and 100 (inclusively), up to 2 decimal places.
+ IsDiscountAllowed: true (required, boolean) - Specifies whether discount can be placed on ticket item that represents this PLU.
+ Type: 1 (required, number) - Specifies type of PLU. See PLU section for possible PLU type values.
+ Note: `This is a note` (optional, string) - Optional string note.
+ ReceiptItems (optional, array[StockTransferItemPlu]) - Contains collection of receipt items. Available only in PLUs with "receipt" type.

## Ticket model (object)

+ Id: 56e28558 (optional, string) - Unique ticket identifier
+ Name: B2 (required, string) - Ticket name (usually choosen by cashier)
+ OpenDate: `2016-03-17T15:49:32.473Z` (required, string) - Date and time of ticket creation (ISO8601 format)
+ CloseInfo (optional, TicketCloseInfo) - Contains informations about ticket closure on fiscal printer. When this value is set, ticket is considered as closed.
+ PurchaseType: WalkIn (required, string) - specifies ticket purchase type: Unknown (Purchase type is not specified), WalkIn (The purchase is being held at the point of sale), TakeAway (The purchase is being picked up at the point of sale), Delivery (The purchase will be delivered to customer)
+ Location (optional, TicketLocation) - Physical location of ticket, describes zone (room) and name of table
+ Customer (optional, CustomerInfo) - Informations about customer account
+ OriginDeviceName: CashRegister01 (required, string) - name of cash register, on which ticket was created
+ Employee (required, UserInfo) - informations about cashier
+ Items (required, array[TicketItem]) - collection of items (products / merchandise)
+ Payments (required, array[TicketPayment]) - collection of payments
+ CurrencyLabel: EUR (required, string) - label of domestic currency. Length have to be between 1 and 3, inclusively.
+ DiscountRate: 50 (required, number) - indicates ticket discount rate, with value between 0 and 100 (inclusively), up to 2 decimal places. 

## TicketBatchUpdateContextOData (object)

+ Action: `Move` (required, string) - Batch update action type, represented by string (`Move` or `Default`)
+ Tickets (required, array[Ticket model]) - Collection of tickets to update.

## TicketCloseInfo (object)

+ CloseDate: `2016-03-17T15:49:32.473Z` (required, string) - Date and time (ISO8601 format) when ticket was closed 
+ DailySalesReportNumber: 1 (required, number) - Number of daily sales report where ticket is closed. This value is provided by fiscal printer.
+ DeviceName: CashRegister01 (required, string) - name of cash register device, from which ticket closing operation was performed. 
+ FiscalMemorySerialNumber: FM20140001 (required, string) - serial number of fiscal memory, in which ticket record is stored 
+ FiscalName: FiscalPrinter01 (required, string) - name of fiscal printer on which ticket was printed as receipt. 
+ Number: 1 (required, number) - Sequence number of ticket in current daily sales report.  This value is provided by fiscal printer.

## TicketLocation (object)

+ TableName: G01 (required, string) - Name of table
+ ZoneName: Garden (required, string) - Name of zone (room)

## TicketCloseContext (object)

+ Employee (optional, UserInfo) - specifies employee, that is closing ticket (and receives money from customers). If value is not provided, identity of user initiating request is used
+ FiscalName: FiscalPrinter01 (required, string) - name of fiscal printer, on which reciept will be printed.

## TicketCloseContextOData (object)

+ Context (required, TicketCloseContext) - Ticket close context.

## TicketItem (object)

+ Id: 1 (optional, number) - Unique ticket item Id (unique within ticket). Value is provided by server.
+ PLU (required, TicketItemPlu) - Informations about product
+ Comment: Without cheese (optional, string) - Comment printed on order printer
+ UnitPriceBrutto (required, Money) - Product brutto unit price
+ DiscountRate: 50 (required, number) - Discount placed on ticket item with value between 0 to 100 with 2 decimal places
+ Quantity (required, Quantity) - Quantity of items sold

## TicketItemPlu (object)

+ ArticleCategoryLabel: PIZ (required, string) - PLU article category label
+ Code: 123 (required, string) - PLU code
+ Description: Pizza Hawaii, 500g (optional, string) - Optional more detailed product name 
+ Name: Pizza Hawaii (required, string) - Product name
+ StockName: S01 (required, string) - PLU stock name
+ IsDiscountAllowed: true (required, boolean) - specifies whether discount can be placed on this product
+ IsPriceFixed: true (required, boolean) - specifies whether ticket item unit price is changeable
+ IsSplittable: true (required, boolean) - specifies whether product can be only sold in integer quantities
+ Type: Recipe (required, string) - Specifies type of PLU. See PLU section for possible PLU type values.
+ OrderEndpointNames: [] (optional, array[string]) - Collection of order endpoint names, on which orders for this product will be printed to
+ VatInfo (required, VAT model) - informations about VAT category and VAT rate

## TicketPayment (object)

+ Amount (required, MoneyInfo) - amount informations in domestic and foreign currency
+ PaymentType (required, TicketPaymentTypeInfo) - 

## TicketPaymentTypeInfo (object) 

+ Description: Credit card (required, string) - Payment type description
+ Number: 2 (required, number) - Payment type number
+ IsChangeable: false (required, boolean) - Payment type "IsChangeable" value

## PrintPreliminaryTicketContext (object)

+ OrderEndpointName: `Bar` (required, string) - Name of order endpoint on which preliminary ticket will be printed.

## PrintPreliminaryTicketContextOData (object)

+ Context (required, PrintPreliminaryTicketContext) - Preliminary ticket context.

## UserCreateUpdateContext (object)

+ IsActive: true (required, boolean) - Determines whether this user account is active and can be used while authorization
+ Name: John Mayer (required, string) - Full name.
+ UserName: John123 (required, string) - Unique user name (login).
+ Password: `*****` (optional, string) - Set value to null, if password should not be changed / created
+ ConfirmPassword: `*****` (optional, string) - Set value to null, if password should not be changed / created
+ Devices (required, array[UserDevice]) - Collection of devices, on which user can operate

## UserDTO (object)

+ IsActive: true (required, boolean) - Determines whether this user account is active and can be used while authorization
+ Name: John Mayer (required, string) - Full name.
+ UserName: John123 (required, string) - Unique user name (login).
+ Devices (required, array[UserDevice]) - Collection of devices, on which user can operate
+ HasPassword: true (required, boolean) - Gives indication, whether user profile has any password set.

## UserDevice (object)

+ IsActive: true (required, boolean) - If set to false, user preferences for this device is persisted, but user cannot access this device
+ Name: CashRegister1 (required, string) - unique device identifier
+ EnvName: CashRegister (required, string) - environment name
+ Description: Cash Register no. 1 (required, string) - Full name of device 
+ Roles: ["admin"] (required, array[string]) - array of user roles.
+ Preferences (required, object) - dictionary of device preferences

## UserInfo (object)

+ Name: John Mayer (required, string) - Full name.
+ UserName: John123 (required, string) - Unique user name (login).

## User profile (object)

+ Name: John Mayer (required, string) - Full name.
+ UserName: John123 (required, string) - Unique user name (login).
+ Rights: ["admin"] (required, array[string]) - array of user roles.
+ Device (required, User profile device) - device which user operates on.

## User profile device (object)

+ Name: CashRegister1 (required, string) - unique device identifier
+ EnvName: CashRegister (required, string) - environment name
+ Description: Cash Register no. 1 (required, string) - Full name of device 
+ Preferences (required, object) - dictionary of device preferences
+ Settings (required, Cash register settings) - device settings

## VAT model (object)

+ Category: 1 (required, number) - unique VAT category with value between 1 and 5.
+ Rate: 20 (required, number) - VAT rate, percentage with value between 0 and 100.

## VatIncome (object)

+ VATCategory: 1 (required, number) - VAT Category number, with value between 1 and 5.
+ VATRate: 20 (required, number) - VAT rate percentage, with value between 0 and 100.
+ VATAmount (required, Money) - Total income VAT amount in specified VAT rate.
+ TotalAmount (required, Money) - Total income amount in specified VAT rate.

## Zone model (object)

+ Name: Terrace (required, string) - Unique name of zone
+ DefaultFiscalName: FiscalPrinter01 (required, string) - Name of fiscal printer, on which tickets from this zones will be closed by default.
+ Items (required, array[ZoneItem]) - colletion of zone items (tables, etc.) located in this zone

## ZoneItem (object)

+ Name: T1 (required, string) - name of zone item, that is unique within zone 
+ IsTable: true (required, boolean) - Defines whether this zone item is table and therefore ticket can reference its location to this zone item.
+ Meta (required, ZoneItemMeta) - meta informations about this zone item

## ZoneItemMeta (object)

+ Position (required, Coordinates) - position of zone item
+ Height (required, number) - height of zone item
+ Width (required, number) - width of zone item
+ Shape: Circle (required, string) - defines shape of zone item, with one of following values: Circle, Rectangle
+ Rotation: 45 (required, number) - Clockwise rotation in degrees 
+ Color: #fff (required, string) - RGB encoded color in format "#ffffff" or "#fff"